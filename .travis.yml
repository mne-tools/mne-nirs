language: generic
dist: bionic
cache:
  pip: true
addons:
  apt:
    packages:
      - libxkbcommon-x11-0
      - libxcb*
      - libosmesa6
      - libglx-mesa0
      - libopengl0
      - libglx0
      - libdbus-1-3
env:
    # OPENBLAS_NUM_THREADS=1 avoid slowdowns:
    # https://github.com/xianyi/OpenBLAS/issues/731
    global: PYTHON_VERSION=3.7 DISPLAY=:99.0 MNE_LOGGING_LEVEL=warning
            CONDA_VERSION=">=4.3.27" OPENBLAS_NUM_THREADS=1 PYTHONUNBUFFERED=1

matrix:
    include:
        # Linux
        - os: linux
          env: CONDA_ENV="environment.yml"

        # OSX conda
        - os: osx
          env: CONDA_ENV="environment.yml"


# Setup anaconda
before_install:
    - if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render -noreset;
      fi;
    - |
      if [ -z "$CONDA_ENV" ] && [ -z "$CONDA_DEPENDENCIES" ]; then
        pip uninstall -yq numpy
        pip install -i "https://pypi.anaconda.org/scipy-wheels-nightly/simple" --pre numpy
        pip install -f "https://7933911d6844c6c53a7d-47bd50c35cd79bd838daf386af554a83.ssl.cf2.rackcdn.com" scipy pandas scikit-learn matplotlib h5py Pillow
        pip install --upgrade -r requirements.txt
      else
        git clone https://github.com/astropy/ci-helpers.git
        source ci-helpers/travis/setup_conda.sh
        if [ ! -z "$CONDA_ENV" ]; then
          conda env update --file $CONDA_ENV
          conda activate mne
          pip uninstall -yq mne
        fi
      fi
    # Always install these via pip so we get the latest possible versions (testing bugfixes)
    - pip install --upgrade -r requirements_testing.txt codecov
    - if [ "${DEPS}" != "minimal" ]; then
        pip install nitime;
      fi


install:
    # Rvm overrides cd with a function so that it can hook into it to run
    # some scripts, see https://github.com/travis-ci/travis-ci/issues/8703
    - if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
        unset -f cd;
      fi;
    # Suppress the parallel outputs for logging cleanliness
    - python setup.py build
    - python setup.py install
    - mne sys_info
    - python -c "import numpy; numpy.show_config()"
    - SRC_DIR=$(pwd)
    - cd ~
    # Trigger download of testing data
    - if [ "${DEPS}" != "minimal" ]; then
        python -c 'import mne; mne.datasets.testing.data_path(verbose=True)';
      fi;
    - cd ${SRC_DIR}
    - pip uninstall -y nilearn
    - pip install git+https://github.com/nilearn/nilearn.git

script:
  - mkdir for_test
  - cd for_test
  - pytest -v --cov=mne_nirs --pyargs mne_nirs

after_success:
  - cp .coverage $TRAVIS_BUILD_DIR
  - codecov --root $TRAVIS_BUILD_DIR || echo "codecov upload failed"
