
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/general/plot_60_aux_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_general_plot_60_aux_data.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_general_plot_60_aux_data.py:


.. _tut-fnirs-aux:

Utilising Auxiliary Data
========================

In this example we demonstrate how to load
auxiliary data from a SNIRF file and include it in
the design matrix for incorporating with your GLM
analysis.

This example builds on the
:ref:`GLM tutorial <tut-fnirs-hrf>`.
As such, we will not explain the GLM procedure in this
example and refer readers to the detailed description above.
Instead, we focus on extracting the auxiliary data and how
this can be incorporated in to your analysis.

.. GENERATED FROM PYTHON SOURCE LINES 19-36

.. code-block:: Python

    # sphinx_gallery_thumbnail_number = 2

    # Authors: Robert Luke <code@robertluke.net>
    #
    # License: BSD (3-clause)

    import matplotlib.pyplot as plt
    import mne
    import numpy as np
    import pandas as pd
    from nilearn.plotting import plot_design_matrix

    from mne_nirs.channels import get_long_channels, get_short_channels
    from mne_nirs.datasets.snirf_with_aux import data_path
    from mne_nirs.experimental_design import make_first_level_design_matrix
    from mne_nirs.io.snirf import read_snirf_aux_data








.. GENERATED FROM PYTHON SOURCE LINES 37-42

Import raw NIRS data
--------------------

First we import the raw data. A different dataset is used from
the previous GLM example that contains auxiliary data.

.. GENERATED FROM PYTHON SOURCE LINES 42-48

.. code-block:: Python


    fnirs_snirf_file = data_path()
    raw_intensity = mne.io.read_raw_snirf(fnirs_snirf_file).load_data()
    raw_intensity.resample(0.7)







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <script type="text/javascript">
        const toggleVisibility = (className) => {

      const elements = document.querySelectorAll(`.${className}`)

      elements.forEach(element => {
        if (element.classList.contains('repr-section-header')) {
          // Don't collapse the section header row.
           return
        }
        if (element.classList.contains('repr-element-collapsed')) {
          // Force a reflow to ensure the display change takes effect before removing the class
          element.classList.remove('repr-element-collapsed')
          element.offsetHeight // This forces the browser to recalculate layout
          element.classList.remove('repr-element-faded')
        } else {
          // Start transition to hide the element
          element.classList.add('repr-element-faded')
          element.addEventListener('transitionend', handler = (e) => {
            if (e.propertyName === 'opacity' && getComputedStyle(element).opacity === '0.2') {
              element.classList.add('repr-element-collapsed')
              element.removeEventListener('transitionend', handler)
            }
          });
        }
      });

      // Take care of button (adjust caret)
      const button = document.querySelectorAll(`.repr-section-header.${className} > th.repr-section-toggle-col > button`)[0]
      button.classList.toggle('collapsed')

      // Take care of the tooltip of the section header row
      const sectionHeaderRow = document.querySelectorAll(`tr.repr-section-header.${className}`)[0]
      sectionHeaderRow.classList.toggle('collapsed')
      sectionHeaderRow.title = sectionHeaderRow.title === 'Hide section' ? 'Show section' : 'Hide section'
    }
    </script>

    <style type="text/css">
        table.repr.table.table-hover.table-striped.table-sm.table-responsive.small {
      /* Don't make rows wider than they need to be. */
      display: inline;
    }

    table > tbody > tr.repr-element > td {
      /* Apply a tighter layout to the table cells. */
      padding-top: 0.1rem;
      padding-bottom: 0.1rem;
      padding-right: 1rem;
    }

    table > tbody > tr > td.repr-section-toggle-col {
      /* Remove background and border of the first cell in every row
         (this row is only used for the collapse / uncollapse caret)

         TODO: Need to find a good solution for VS Code that works in both
               light and dark mode. */
      border-color: transparent;
      --bs-table-accent-bg: transparent;
    }

    tr.repr-section-header {
      /* Remove stripes from section header rows */
      background-color: transparent;
      border-color: transparent;
      --bs-table-striped-bg: transparent;
      cursor: pointer;
    }

    tr.repr-section-header > th {
      text-align: left !important;
      vertical-align: middle;
    }

    .repr-element, tr.repr-element > td {
      opacity: 1;
      text-align: left !important;
    }

    .repr-element-faded {
      transition: 0.3s ease;
      opacity: 0.2;
    }

    .repr-element-collapsed {
      display: none;
    }

    /* Collapse / uncollapse button and the caret it contains. */
    .repr-section-toggle-col button {
      cursor: pointer;
      width: 1rem;
      background-color: transparent;
      border-color: transparent;
    }

    span.collapse-uncollapse-caret {
      width: 1rem;
      height: 1rem;
      display: block;
      background-repeat: no-repeat;
      background-position: left;
      background-size: contain;
    }

    /* The collapse / uncollapse carets were copied from the free Font Awesome collection and adjusted. */

    /* Default to black carets for light mode */
    .repr-section-toggle-col > button.collapsed > span.collapse-uncollapse-caret {
      background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="black" d="M246.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-9.2-9.2-22.9-11.9-34.9-6.9s-19.8 16.6-19.8 29.6l0 256c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l128-128z"/></svg>');
    }

    .repr-section-toggle-col
      > button:not(.collapsed)
      > span.collapse-uncollapse-caret {
      background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="black" d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg>');
    }

    /* Use white carets for dark mode */
    @media (prefers-color-scheme: dark) {
      .repr-section-toggle-col > button.collapsed > span.collapse-uncollapse-caret {
        background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="white" d="M246.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-9.2-9.2-22.9-11.9-34.9-6.9s-19.8 16.6-19.8 29.6l0 256c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l128-128z"/></svg>');
      }

      .repr-section-toggle-col
        > button:not(.collapsed)
        > span.collapse-uncollapse-caret {
        background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="white" d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg>');
      }
    }

    .channel-names-btn {
      padding: 0;
      border: none;
      background: none;
      text-decoration: underline;
      text-decoration-style: dashed;
      cursor: pointer;
      color: #0d6efd;
    }

    .channel-names-btn:hover {
      color: #0a58ca;
    }
    </style>



    <table class="repr table table-hover table-striped table-sm table-responsive small">
    







    <tr class="repr-section-header general-9b4c5ed8-9200-44ec-8564-6dbf9d1f4dcb"  title="Hide section" 
        onclick="toggleVisibility('general-9b4c5ed8-9200-44ec-8564-6dbf9d1f4dcb')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>General</strong>
        </th>
    </tr>

    <tr class="repr-element general-9b4c5ed8-9200-44ec-8564-6dbf9d1f4dcb ">
        <td class="repr-section-toggle-col"></td>
        <td>Filename(s)</td>
        <td>
        
            2022-08-05_002.snirf
        
        
        </td>
    </tr>

    <tr class="repr-element general-9b4c5ed8-9200-44ec-8564-6dbf9d1f4dcb ">
        <td class="repr-section-toggle-col"></td>
        <td>MNE object type</td>
        <td>RawSNIRF</td>
    </tr>
    <tr class="repr-element general-9b4c5ed8-9200-44ec-8564-6dbf9d1f4dcb ">
        <td class="repr-section-toggle-col"></td>
        <td>Measurement date</td>
    
        <td>2022-08-05 at 13:10:58 UTC</td>
    
    </tr>
    <tr class="repr-element general-9b4c5ed8-9200-44ec-8564-6dbf9d1f4dcb ">
        <td class="repr-section-toggle-col"></td>
        <td>Participant</td>
    
    
        <td>default</td>
    
    
    </tr>
    <tr class="repr-element general-9b4c5ed8-9200-44ec-8564-6dbf9d1f4dcb ">
        <td class="repr-section-toggle-col"></td>
        <td>Experimenter</td>
    
        <td>Unknown</td>
    
    </tr>
    







    <tr class="repr-section-header acquisition-dbb5a3ad-27a1-4447-bfe7-1f19d05a175b" 
        title="Hide section"  onclick="toggleVisibility('acquisition-dbb5a3ad-27a1-4447-bfe7-1f19d05a175b')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>Acquisition</strong>
        </th>
    </tr>

    <tr class="repr-element acquisition-dbb5a3ad-27a1-4447-bfe7-1f19d05a175b ">
        <td class="repr-section-toggle-col"></td>
        <td>Duration</td>
        <td>00:33:53 (HH:MM:SS)</td>
    </tr>








    <tr class="repr-element acquisition-dbb5a3ad-27a1-4447-bfe7-1f19d05a175b ">
        <td class="repr-section-toggle-col"></td>
        <td>Sampling frequency</td>
        <td>0.70 Hz</td>
    </tr>


    <tr class="repr-element acquisition-dbb5a3ad-27a1-4447-bfe7-1f19d05a175b ">
        <td class="repr-section-toggle-col"></td>
        <td>Time points</td>
        <td>1,424</td>
    </tr>


    







    <tr class="repr-section-header channels-d43b1664-ac3a-4701-8786-5ae4c21428f9"  title="Hide section" 
        onclick="toggleVisibility('channels-d43b1664-ac3a-4701-8786-5ae4c21428f9')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>Channels</strong>
        </th>
    </tr>


    <tr class="repr-element channels-d43b1664-ac3a-4701-8786-5ae4c21428f9 ">
        <td class="repr-section-toggle-col"></td>
        <td>fNIRS (CW amplitude)</td>
        <td>
            <button class="channel-names-btn" onclick="alert('Good fNIRS (CW amplitude):\n\nS1_D1&nbsp;760, S1_D2&nbsp;760, S1_D3&nbsp;760, S1_D9&nbsp;760, S2_D1&nbsp;760, S2_D3&nbsp;760, S2_D4&nbsp;760, S2_D10&nbsp;760, S3_D2&nbsp;760, S3_D3&nbsp;760, S3_D11&nbsp;760, S4_D3&nbsp;760, S4_D4&nbsp;760, S4_D12&nbsp;760, S5_D5&nbsp;760, S5_D6&nbsp;760, S5_D7&nbsp;760, S5_D13&nbsp;760, S6_D5&nbsp;760, S6_D7&nbsp;760, S6_D8&nbsp;760, S6_D14&nbsp;760, S7_D6&nbsp;760, S7_D7&nbsp;760, S7_D15&nbsp;760, S8_D7&nbsp;760, S8_D8&nbsp;760, S8_D16&nbsp;760, S1_D1&nbsp;850, S1_D2&nbsp;850, S1_D3&nbsp;850, S1_D9&nbsp;850, S2_D1&nbsp;850, S2_D3&nbsp;850, S2_D4&nbsp;850, S2_D10&nbsp;850, S3_D2&nbsp;850, S3_D3&nbsp;850, S3_D11&nbsp;850, S4_D3&nbsp;850, S4_D4&nbsp;850, S4_D12&nbsp;850, S5_D5&nbsp;850, S5_D6&nbsp;850, S5_D7&nbsp;850, S5_D13&nbsp;850, S6_D5&nbsp;850, S6_D7&nbsp;850, S6_D8&nbsp;850, S6_D14&nbsp;850, S7_D6&nbsp;850, S7_D7&nbsp;850, S7_D15&nbsp;850, S8_D7&nbsp;850, S8_D8&nbsp;850, S8_D16&nbsp;850')" title="(Click to open in popup)&#13;&#13;S1_D1&nbsp;760, S1_D2&nbsp;760, S1_D3&nbsp;760, S1_D9&nbsp;760, S2_D1&nbsp;760, S2_D3&nbsp;760, S2_D4&nbsp;760, S2_D10&nbsp;760, S3_D2&nbsp;760, S3_D3&nbsp;760, S3_D11&nbsp;760, S4_D3&nbsp;760, S4_D4&nbsp;760, S4_D12&nbsp;760, S5_D5&nbsp;760, S5_D6&nbsp;760, S5_D7&nbsp;760, S5_D13&nbsp;760, S6_D5&nbsp;760, S6_D7&nbsp;760, S6_D8&nbsp;760, S6_D14&nbsp;760, S7_D6&nbsp;760, S7_D7&nbsp;760, S7_D15&nbsp;760, S8_D7&nbsp;760, S8_D8&nbsp;760, S8_D16&nbsp;760, S1_D1&nbsp;850, S1_D2&nbsp;850, S1_D3&nbsp;850, S1_D9&nbsp;850, S2_D1&nbsp;850, S2_D3&nbsp;850, S2_D4&nbsp;850, S2_D10&nbsp;850, S3_D2&nbsp;850, S3_D3&nbsp;850, S3_D11&nbsp;850, S4_D3&nbsp;850, S4_D4&nbsp;850, S4_D12&nbsp;850, S5_D5&nbsp;850, S5_D6&nbsp;850, S5_D7&nbsp;850, S5_D13&nbsp;850, S6_D5&nbsp;850, S6_D7&nbsp;850, S6_D8&nbsp;850, S6_D14&nbsp;850, S7_D6&nbsp;850, S7_D7&nbsp;850, S7_D15&nbsp;850, S8_D7&nbsp;850, S8_D8&nbsp;850, S8_D16&nbsp;850">
                56
            </button>

        
        </td>
    </tr>


    <tr class="repr-element channels-d43b1664-ac3a-4701-8786-5ae4c21428f9 ">
        <td class="repr-section-toggle-col"></td>
        <td>Head & sensor digitization</td>
    
        <td>300 points</td>
    
    </tr>
    







    <tr class="repr-section-header filters-c0f02754-727b-4846-b1fa-f731f54e8cb3"  title="Hide section" 
        onclick="toggleVisibility('filters-c0f02754-727b-4846-b1fa-f731f54e8cb3')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>Filters</strong>
        </th>
    </tr>

    <tr class="repr-element filters-c0f02754-727b-4846-b1fa-f731f54e8cb3 ">
        <td class="repr-section-toggle-col"></td>
        <td>Highpass</td>
        <td>0.00 Hz</td>
    </tr>


    <tr class="repr-element filters-c0f02754-727b-4846-b1fa-f731f54e8cb3 ">
        <td class="repr-section-toggle-col"></td>
        <td>Lowpass</td>
        <td>0.35 Hz</td>
    </tr>


    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 49-55

Clean up annotations before analysis
------------------------------------

Next we update the annotations by assigning names to each trigger ID.
Then we crop the recording to the section containing our
experimental conditions.

.. GENERATED FROM PYTHON SOURCE LINES 55-63

.. code-block:: Python


    raw_intensity.annotations.rename(
        {"1": "Control", "2": "Tapping_Left", "3": "Tapping_Right"}
    )
    raw_intensity.annotations.delete(raw_intensity.annotations.description == "15")
    raw_intensity.annotations.set_durations(5)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Annotations | 60 segments: Control (20), Tapping_Left (20), Tapping_Right ...>



.. GENERATED FROM PYTHON SOURCE LINES 64-67

Preprocess NIRS data
--------------------
Next we convert the raw data to haemoglobin concentration.

.. GENERATED FROM PYTHON SOURCE LINES 67-72

.. code-block:: Python


    raw_od = mne.preprocessing.nirs.optical_density(raw_intensity)
    raw_haemo = mne.preprocessing.nirs.beer_lambert_law(raw_od, ppf=0.1)









.. GENERATED FROM PYTHON SOURCE LINES 73-76

We then split the data in to
short channels which predominantly contain systemic responses and
long channels which have both neural and systemic contributions.

.. GENERATED FROM PYTHON SOURCE LINES 77-82

.. code-block:: Python


    short_chs = get_short_channels(raw_haemo)
    raw_haemo = get_long_channels(raw_haemo)









.. GENERATED FROM PYTHON SOURCE LINES 83-95

Create design matrix
--------------------

.. sidebar:: Relevant literature

   For further discussion on design matrices see
   the Nilearn examples. Specifically the
   `first level model example <http://nilearn.github.io/auto_examples/04_glm_first_level/plot_first_level_details.html>`_.

Next we create a model to fit our data to.
The model consists of various components to model different things we assume
contribute to the measured signal.

.. GENERATED FROM PYTHON SOURCE LINES 95-105

.. code-block:: Python


    design_matrix = make_first_level_design_matrix(
        raw_haemo,
        drift_model="cosine",
        high_pass=0.005,  # Must be specified per experiment
        hrf_model="spm",
        stim_dur=5.0,
    )









.. GENERATED FROM PYTHON SOURCE LINES 106-111

We also add the mean of the short channels to the design matrix.
In theory these channels contain only systemic components, so including
them in the design matrix allows us to estimate the neural component
related to each experimental condition
uncontaminated by systemic effects.

.. GENERATED FROM PYTHON SOURCE LINES 112-122

.. code-block:: Python


    design_matrix["ShortHbO"] = np.mean(
        short_chs.copy().pick(picks="hbo").get_data(), axis=0
    )

    design_matrix["ShortHbR"] = np.mean(
        short_chs.copy().pick(picks="hbr").get_data(), axis=0
    )









.. GENERATED FROM PYTHON SOURCE LINES 123-126

We can view the design matrix by printing the variable
and we see that it includes the standard regressors, but does
not yet contain any auxiliary data.

.. GENERATED FROM PYTHON SOURCE LINES 127-132

.. code-block:: Python


    fig, ax1 = plt.subplots(figsize=(10, 6), nrows=1, ncols=1)
    fig = plot_design_matrix(design_matrix, ax=ax1)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_60_aux_data_001.png
   :alt: plot 60 aux data
   :srcset: /auto_examples/general/images/sphx_glr_plot_60_aux_data_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 133-143

Load auxiliary data
-------------------

The design matrix is a pandas data frame. As such,
we wish to load the auxiliary data in the same format.
The following function will load the SNIRF file and extract
the auxiliary data. The auxiliary data can be sampled at a
different rate to the raw fNIRS data, so this function will
conveniently resample the data to the same rate as the raw
fNIRS data.

.. GENERATED FROM PYTHON SOURCE LINES 143-147

.. code-block:: Python


    aux_df = read_snirf_aux_data(fnirs_snirf_file, raw_haemo)









.. GENERATED FROM PYTHON SOURCE LINES 148-150

And you can verify the data looks reasonable by plotting
individual fields.

.. GENERATED FROM PYTHON SOURCE LINES 151-157

.. code-block:: Python


    plt.plot(raw_haemo.times, aux_df["HR"])
    plt.xlabel("Time (s)")
    plt.ylabel("Heart Rate (bpm)")





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_60_aux_data_002.png
   :alt: plot 60 aux data
   :srcset: /auto_examples/general/images/sphx_glr_plot_60_aux_data_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(38.347222222222214, 0.5, 'Heart Rate (bpm)')



.. GENERATED FROM PYTHON SOURCE LINES 158-163

Include auxiliary data in design matrix
---------------------------------------

Finally we append the auxiliary data to the design matrix
so that these can be included as regressors in a GLM analysis.

.. GENERATED FROM PYTHON SOURCE LINES 163-168

.. code-block:: Python



    design_matrix = pd.concat([design_matrix, aux_df], axis=1)









.. GENERATED FROM PYTHON SOURCE LINES 169-171

And we can visually display the design matrix and verify
the data is included.

.. GENERATED FROM PYTHON SOURCE LINES 172-176

.. code-block:: Python

    fig, ax1 = plt.subplots(figsize=(10, 6), nrows=1, ncols=1)
    fig = plot_design_matrix(design_matrix, ax=ax1)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_60_aux_data_003.png
   :alt: plot 60 aux data
   :srcset: /auto_examples/general/images/sphx_glr_plot_60_aux_data_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 177-187

Conclusion
----------

We have demonstrated how to load auxiliary data from a SNIRF
file. We illustrated how to include this data in your design matrix
for further GLM analysis. We do not go through a full GLM analysis,
instead the reader is directed to the dedicated :ref:`GLM tutorial <tut-fnirs-hrf>`.
The auxiliary data may need to be treated before being included in your analysis,
for example you may need to normalise before inclusion in statistical analysis etc,
but this is beyond the scope of this tutorial.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.832 seconds)

**Estimated memory usage:**  431 MB


.. _sphx_glr_download_auto_examples_general_plot_60_aux_data.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mne-tools/mne-nirs/gh-pages?filepath=stable/notebooks/auto_examples/general/plot_60_aux_data.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_60_aux_data.ipynb <plot_60_aux_data.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_60_aux_data.py <plot_60_aux_data.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_60_aux_data.zip <plot_60_aux_data.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
