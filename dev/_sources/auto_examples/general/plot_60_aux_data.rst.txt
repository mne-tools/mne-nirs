
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/general/plot_60_aux_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_general_plot_60_aux_data.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_general_plot_60_aux_data.py:


.. _tut-fnirs-aux:

Utilising Auxiliary Data
========================

In this example we demonstrate how to load
auxiliary data from a SNIRF file and include it in
the design matrix for incorporating with your GLM
analysis.

This example builds on the
:ref:`GLM tutorial <tut-fnirs-hrf>`.
As such, we will not explain the GLM procedure in this
example and refer readers to the detailed description above.
Instead, we focus on extracting the auxiliary data and how
this can be incorporated in to your analysis.

.. GENERATED FROM PYTHON SOURCE LINES 19-36

.. code-block:: Python

    # sphinx_gallery_thumbnail_number = 2

    # Authors: Robert Luke <code@robertluke.net>
    #
    # License: BSD (3-clause)

    import matplotlib.pyplot as plt
    import mne
    import numpy as np
    import pandas as pd
    from nilearn.plotting import plot_design_matrix

    from mne_nirs.channels import get_long_channels, get_short_channels
    from mne_nirs.datasets.snirf_with_aux import data_path
    from mne_nirs.experimental_design import make_first_level_design_matrix
    from mne_nirs.io.snirf import read_snirf_aux_data








.. GENERATED FROM PYTHON SOURCE LINES 37-42

Import raw NIRS data
--------------------

First we import the raw data. A different dataset is used from
the previous GLM example that contains auxiliary data.

.. GENERATED FROM PYTHON SOURCE LINES 42-48

.. code-block:: Python


    fnirs_snirf_file = data_path()
    raw_intensity = mne.io.read_raw_snirf(fnirs_snirf_file).load_data()
    raw_intensity.resample(0.7)







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <script type="text/javascript">
        // must be `var` (not `const`) because this can get embedded multiple times on a page
    var toggleVisibility = (className) => {

        const elements = document.querySelectorAll(`.${className}`);

        elements.forEach(element => {
            if (element.classList.contains("mne-repr-section-header")) {
                return  // Don't collapse the section header row
            }
            element.classList.toggle("mne-repr-collapsed");
        });

        // trigger caret to rotate
        var sel = `.mne-repr-section-header.${className} > th.mne-repr-section-toggle > button`;
        const button = document.querySelector(sel);
        button.classList.toggle("collapsed");

        // adjust tooltip
        sel = `tr.mne-repr-section-header.${className}`;
        const secHeadRow = document.querySelector(sel);
        secHeadRow.classList.toggle("collapsed");
        secHeadRow.title = secHeadRow.title === "Hide section" ? "Show section" : "Hide section";
    }
    </script>

    <style type="text/css">
        /*
    Styles in this section apply both to the sphinx-built website docs and to notebooks
    rendered in an IDE or in Jupyter. In our web docs, styles here are complemented by
    doc/_static/styles.css and other CSS files (e.g. from the sphinx theme, sphinx-gallery,
    or bootstrap). In IDEs/Jupyter, those style files are unavailable, so only the rules in
    this file apply (plus whatever default styling the IDE applies).
    */
    .mne-repr-table {
        display: inline;  /* prevent using full container width */
    }
    .mne-repr-table tr.mne-repr-section-header > th {
        padding-top: 1rem;
        text-align: left;
        vertical-align: middle;
    }
    .mne-repr-section-toggle > button {
        all: unset;
        display: block;
        height: 1rem;
        width: 1rem;
    }
    .mne-repr-section-toggle > button > svg {
        height: 60%;
    }

    /* transition (rotation) effects on the collapser button */
    .mne-repr-section-toggle > button.collapsed > svg {
        transition: 0.1s ease-out;
        transform: rotate(-90deg);
    }
    .mne-repr-section-toggle > button:not(.collapsed) > svg {
        transition: 0.1s ease-out;
        transform: rotate(0deg);
    }

    /* hide collapsed table rows */
    .mne-repr-collapsed {
        display: none;
    }


    @layer {
        /*
        Selectors in a `@layer` will always be lower-precedence than selectors outside the
        layer. So even though e.g. `div.output_html` is present in the sphinx-rendered
        website docs, the styles here won't take effect there as long as some other rule
        somewhere in the page's CSS targets the same element.

        In IDEs or Jupyter notebooks, though, the CSS files from the sphinx theme,
        sphinx-gallery, and bootstrap are unavailable, so these styles will apply.

        Notes:

        - the selector `.accordion-body` is for MNE Reports
        - the selector `.output_html` is for VSCode's notebook interface
        - the selector `.jp-RenderedHTML` is for Jupyter notebook
        - variables starting with `--theme-` are VSCode-specific.
        - variables starting with `--jp-` are Jupyter styles, *some of which* are also
          available in VSCode. Here we try the `--theme-` variable first, then fall back to
          the `--jp-` ones.
        */
        .mne-repr-table {
            --mne-toggle-color: var(--theme-foreground, var(--jp-ui-font-color1));
            --mne-button-bg-color: var(--theme-button-background, var(--jp-info-color0, var(--jp-content-link-color)));
            --mne-button-fg-color: var(--theme-button-foreground, var(--jp-ui-inverse-font-color0, var(--jp-editor-background)));
            --mne-button-hover-bg-color: var(--theme-button-hover-background, var(--jp-info-color1));
            --mne-button-radius: var(--jp-border-radius, 0.25rem);
        }
        /* chevron position/alignment; in VSCode it looks ok without adjusting */
        .accordion-body .mne-repr-section-toggle > button,
        .jp-RenderedHTML .mne-repr-section-toggle > button {
            padding: 0 0 45% 25% !important;
        }
        /* chevron color; MNE Report doesn't have light/dark mode */
        div.output_html .mne-repr-section-toggle > button > svg > path,
        .jp-RenderedHTML .mne-repr-section-toggle > button > svg > path {
            fill: var(--mne-toggle-color);
        }
        .accordion-body .mne-ch-names-btn,
        div.output_html .mne-ch-names-btn,
        .jp-RenderedHTML .mne-ch-names-btn {
            -webkit-border-radius: var(--mne-button-radius);
            -moz-border-radius: var(--mne-button-radius);
            border-radius: var(--mne-button-radius);
            border: none;
            background-image: none;
            background-color: var(--mne-button-bg-color);
            color: var(--mne-button-fg-color);
            font-size: inherit;
            min-width: 1.5rem;
            padding: 0.25rem;
            text-align: center;
            text-decoration: none;
        }
        .accordion-body .mne-ch-names-btn:hover,
        div.output_html .mne.ch-names-btn:hover,
        .jp-RenderedHTML .mne-ch-names-btn:hover {
            background-color: var(--mne-button-hover-bg-color);
            text-decoration: underline;
        }
        .accordion-body .mne-ch-names-btn:focus-visible,
        div.output_html .mne-ch-names-btn:focus-visible,
        .jp-RenderedHTML .mne-ch-names-btn:focus-visible {
            outline: 0.1875rem solid var(--mne-button-bg-color) !important;
            outline-offset: 0.1875rem !important;
        }
    }
    </style>



    <table class="table mne-repr-table">
    







    <tr class="mne-repr-section-header general-46890d01-7a80-4502-bff2-5d1445221fdb"
         title="Hide section" 
        onclick="toggleVisibility('general-46890d01-7a80-4502-bff2-5d1445221fdb')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>General</strong>
        </th>
    </tr>


    <tr class="repr-element general-46890d01-7a80-4502-bff2-5d1445221fdb ">
        <td class="mne-repr-section-toggle"></td>
        <td>Filename(s)</td>
        <td>
        
            2022-08-05_002.snirf
        
        
        </td>
    </tr>

    <tr class="repr-element general-46890d01-7a80-4502-bff2-5d1445221fdb ">
        <td class="mne-repr-section-toggle"></td>
        <td>MNE object type</td>
        <td>RawSNIRF</td>
    </tr>
    <tr class="repr-element general-46890d01-7a80-4502-bff2-5d1445221fdb ">
        <td class="mne-repr-section-toggle"></td>
        <td>Measurement date</td>
    
        <td>2022-08-05 at 13:10:58 UTC</td>
    
    </tr>
    <tr class="repr-element general-46890d01-7a80-4502-bff2-5d1445221fdb ">
        <td class="mne-repr-section-toggle"></td>
        <td>Participant</td>
    
    
        <td>default</td>
    
    
    </tr>
    <tr class="repr-element general-46890d01-7a80-4502-bff2-5d1445221fdb ">
        <td class="mne-repr-section-toggle"></td>
        <td>Experimenter</td>
    
        <td>Unknown</td>
    
    </tr>
    







    <tr class="mne-repr-section-header acquisition-4782e13b-fdce-4c36-a749-05909ecad0ac"
         title="Hide section" 
        onclick="toggleVisibility('acquisition-4782e13b-fdce-4c36-a749-05909ecad0ac')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Acquisition</strong>
        </th>
    </tr>


    <tr class="repr-element acquisition-4782e13b-fdce-4c36-a749-05909ecad0ac ">
        <td class="mne-repr-section-toggle"></td>
        <td>Duration</td>
        <td>00:33:55 (HH:MM:SS)</td>
    </tr>








    <tr class="repr-element acquisition-4782e13b-fdce-4c36-a749-05909ecad0ac ">
        <td class="mne-repr-section-toggle"></td>
        <td>Sampling frequency</td>
        <td>0.70 Hz</td>
    </tr>


    <tr class="repr-element acquisition-4782e13b-fdce-4c36-a749-05909ecad0ac ">
        <td class="mne-repr-section-toggle"></td>
        <td>Time points</td>
        <td>1,424</td>
    </tr>


    







    <tr class="mne-repr-section-header channels-32d72e4b-4767-4ad6-9a13-9a4a784e9a8c"
         title="Hide section" 
        onclick="toggleVisibility('channels-32d72e4b-4767-4ad6-9a13-9a4a784e9a8c')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Channels</strong>
        </th>
    </tr>


    
    <tr class="repr-element channels-32d72e4b-4767-4ad6-9a13-9a4a784e9a8c ">
        <td class="mne-repr-section-toggle"></td>
        <td>fNIRS (CW amplitude)</td>
        <td>
            <button class="mne-ch-names-btn sd-sphinx-override sd-btn sd-btn-info sd-text-wrap sd-shadow-sm" onclick="alert('Good fNIRS (CW amplitude):\n\nS1_D1&nbsp;760, S1_D2&nbsp;760, S1_D3&nbsp;760, S1_D9&nbsp;760, S2_D1&nbsp;760, S2_D3&nbsp;760, S2_D4&nbsp;760, S2_D10&nbsp;760, S3_D2&nbsp;760, S3_D3&nbsp;760, S3_D11&nbsp;760, S4_D3&nbsp;760, S4_D4&nbsp;760, S4_D12&nbsp;760, S5_D5&nbsp;760, S5_D6&nbsp;760, S5_D7&nbsp;760, S5_D13&nbsp;760, S6_D5&nbsp;760, S6_D7&nbsp;760, S6_D8&nbsp;760, S6_D14&nbsp;760, S7_D6&nbsp;760, S7_D7&nbsp;760, S7_D15&nbsp;760, S8_D7&nbsp;760, S8_D8&nbsp;760, S8_D16&nbsp;760, S1_D1&nbsp;850, S1_D2&nbsp;850, S1_D3&nbsp;850, S1_D9&nbsp;850, S2_D1&nbsp;850, S2_D3&nbsp;850, S2_D4&nbsp;850, S2_D10&nbsp;850, S3_D2&nbsp;850, S3_D3&nbsp;850, S3_D11&nbsp;850, S4_D3&nbsp;850, S4_D4&nbsp;850, S4_D12&nbsp;850, S5_D5&nbsp;850, S5_D6&nbsp;850, S5_D7&nbsp;850, S5_D13&nbsp;850, S6_D5&nbsp;850, S6_D7&nbsp;850, S6_D8&nbsp;850, S6_D14&nbsp;850, S7_D6&nbsp;850, S7_D7&nbsp;850, S7_D15&nbsp;850, S8_D7&nbsp;850, S8_D8&nbsp;850, S8_D16&nbsp;850')" title="(Click to open in popup)&#13;&#13;S1_D1&nbsp;760, S1_D2&nbsp;760, S1_D3&nbsp;760, S1_D9&nbsp;760, S2_D1&nbsp;760, S2_D3&nbsp;760, S2_D4&nbsp;760, S2_D10&nbsp;760, S3_D2&nbsp;760, S3_D3&nbsp;760, S3_D11&nbsp;760, S4_D3&nbsp;760, S4_D4&nbsp;760, S4_D12&nbsp;760, S5_D5&nbsp;760, S5_D6&nbsp;760, S5_D7&nbsp;760, S5_D13&nbsp;760, S6_D5&nbsp;760, S6_D7&nbsp;760, S6_D8&nbsp;760, S6_D14&nbsp;760, S7_D6&nbsp;760, S7_D7&nbsp;760, S7_D15&nbsp;760, S8_D7&nbsp;760, S8_D8&nbsp;760, S8_D16&nbsp;760, S1_D1&nbsp;850, S1_D2&nbsp;850, S1_D3&nbsp;850, S1_D9&nbsp;850, S2_D1&nbsp;850, S2_D3&nbsp;850, S2_D4&nbsp;850, S2_D10&nbsp;850, S3_D2&nbsp;850, S3_D3&nbsp;850, S3_D11&nbsp;850, S4_D3&nbsp;850, S4_D4&nbsp;850, S4_D12&nbsp;850, S5_D5&nbsp;850, S5_D6&nbsp;850, S5_D7&nbsp;850, S5_D13&nbsp;850, S6_D5&nbsp;850, S6_D7&nbsp;850, S6_D8&nbsp;850, S6_D14&nbsp;850, S7_D6&nbsp;850, S7_D7&nbsp;850, S7_D15&nbsp;850, S8_D7&nbsp;850, S8_D8&nbsp;850, S8_D16&nbsp;850">
                56
            </button>

        
        </td>
    </tr>


    <tr class="repr-element channels-32d72e4b-4767-4ad6-9a13-9a4a784e9a8c ">
        <td class="mne-repr-section-toggle"></td>
        <td>Head & sensor digitization</td>
    
        <td>300 points</td>
    
    </tr>
    







    <tr class="mne-repr-section-header filters-5196dbc5-dbc4-4f5a-a4ab-36a0c8c313bf"
         title="Hide section" 
        onclick="toggleVisibility('filters-5196dbc5-dbc4-4f5a-a4ab-36a0c8c313bf')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Filters</strong>
        </th>
    </tr>


    <tr class="repr-element filters-5196dbc5-dbc4-4f5a-a4ab-36a0c8c313bf ">
        <td class="mne-repr-section-toggle"></td>
        <td>Highpass</td>
        <td>0.00 Hz</td>
    </tr>


    <tr class="repr-element filters-5196dbc5-dbc4-4f5a-a4ab-36a0c8c313bf ">
        <td class="mne-repr-section-toggle"></td>
        <td>Lowpass</td>
        <td>0.35 Hz</td>
    </tr>


    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 49-55

Clean up annotations before analysis
------------------------------------

Next we update the annotations by assigning names to each trigger ID.
Then we crop the recording to the section containing our
experimental conditions.

.. GENERATED FROM PYTHON SOURCE LINES 55-63

.. code-block:: Python


    raw_intensity.annotations.rename(
        {"1": "Control", "2": "Tapping_Left", "3": "Tapping_Right"}
    )
    raw_intensity.annotations.delete(raw_intensity.annotations.description == "15")
    raw_intensity.annotations.set_durations(5)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Annotations | 60 segments: Control (20), Tapping_Left (20), Tapping_Right ...>



.. GENERATED FROM PYTHON SOURCE LINES 64-67

Preprocess NIRS data
--------------------
Next we convert the raw data to haemoglobin concentration.

.. GENERATED FROM PYTHON SOURCE LINES 67-72

.. code-block:: Python


    raw_od = mne.preprocessing.nirs.optical_density(raw_intensity)
    raw_haemo = mne.preprocessing.nirs.beer_lambert_law(raw_od, ppf=0.1)









.. GENERATED FROM PYTHON SOURCE LINES 73-76

We then split the data in to
short channels which predominantly contain systemic responses and
long channels which have both neural and systemic contributions.

.. GENERATED FROM PYTHON SOURCE LINES 77-82

.. code-block:: Python


    short_chs = get_short_channels(raw_haemo)
    raw_haemo = get_long_channels(raw_haemo)









.. GENERATED FROM PYTHON SOURCE LINES 83-95

Create design matrix
--------------------

.. sidebar:: Relevant literature

   For further discussion on design matrices see
   the Nilearn examples. Specifically the
   `first level model example <http://nilearn.github.io/auto_examples/04_glm_first_level/plot_first_level_details.html>`_.

Next we create a model to fit our data to.
The model consists of various components to model different things we assume
contribute to the measured signal.

.. GENERATED FROM PYTHON SOURCE LINES 95-105

.. code-block:: Python


    design_matrix = make_first_level_design_matrix(
        raw_haemo,
        drift_model="cosine",
        high_pass=0.005,  # Must be specified per experiment
        hrf_model="spm",
        stim_dur=5.0,
    )









.. GENERATED FROM PYTHON SOURCE LINES 106-111

We also add the mean of the short channels to the design matrix.
In theory these channels contain only systemic components, so including
them in the design matrix allows us to estimate the neural component
related to each experimental condition
uncontaminated by systemic effects.

.. GENERATED FROM PYTHON SOURCE LINES 112-122

.. code-block:: Python


    design_matrix["ShortHbO"] = np.mean(
        short_chs.copy().pick(picks="hbo").get_data(), axis=0
    )

    design_matrix["ShortHbR"] = np.mean(
        short_chs.copy().pick(picks="hbr").get_data(), axis=0
    )









.. GENERATED FROM PYTHON SOURCE LINES 123-126

We can view the design matrix by printing the variable
and we see that it includes the standard regressors, but does
not yet contain any auxiliary data.

.. GENERATED FROM PYTHON SOURCE LINES 127-132

.. code-block:: Python


    fig, ax1 = plt.subplots(figsize=(10, 6), nrows=1, ncols=1)
    fig = plot_design_matrix(design_matrix, ax=ax1)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_60_aux_data_001.png
   :alt: plot 60 aux data
   :srcset: /auto_examples/general/images/sphx_glr_plot_60_aux_data_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/circleci/project/examples/general/plot_60_aux_data.py:129: DeprecationWarning: The parameter "ax" will be removed in 0.13.0 release of Nilearn. Please use the parameter "axes" instead.
      fig = plot_design_matrix(design_matrix, ax=ax1)




.. GENERATED FROM PYTHON SOURCE LINES 133-143

Load auxiliary data
-------------------

The design matrix is a pandas data frame. As such,
we wish to load the auxiliary data in the same format.
The following function will load the SNIRF file and extract
the auxiliary data. The auxiliary data can be sampled at a
different rate to the raw fNIRS data, so this function will
conveniently resample the data to the same rate as the raw
fNIRS data.

.. GENERATED FROM PYTHON SOURCE LINES 143-147

.. code-block:: Python


    aux_df = read_snirf_aux_data(fnirs_snirf_file, raw_haemo)









.. GENERATED FROM PYTHON SOURCE LINES 148-150

And you can verify the data looks reasonable by plotting
individual fields.

.. GENERATED FROM PYTHON SOURCE LINES 151-157

.. code-block:: Python


    plt.plot(raw_haemo.times, aux_df["HR"])
    plt.xlabel("Time (s)")
    plt.ylabel("Heart Rate (bpm)")





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_60_aux_data_002.png
   :alt: plot 60 aux data
   :srcset: /auto_examples/general/images/sphx_glr_plot_60_aux_data_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(38.347222222222214, 0.5, 'Heart Rate (bpm)')



.. GENERATED FROM PYTHON SOURCE LINES 158-163

Include auxiliary data in design matrix
---------------------------------------

Finally we append the auxiliary data to the design matrix
so that these can be included as regressors in a GLM analysis.

.. GENERATED FROM PYTHON SOURCE LINES 163-168

.. code-block:: Python



    design_matrix = pd.concat([design_matrix, aux_df], axis=1)









.. GENERATED FROM PYTHON SOURCE LINES 169-171

And we can visually display the design matrix and verify
the data is included.

.. GENERATED FROM PYTHON SOURCE LINES 172-176

.. code-block:: Python

    fig, ax1 = plt.subplots(figsize=(10, 6), nrows=1, ncols=1)
    fig = plot_design_matrix(design_matrix, ax=ax1)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_60_aux_data_003.png
   :alt: plot 60 aux data
   :srcset: /auto_examples/general/images/sphx_glr_plot_60_aux_data_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/circleci/project/examples/general/plot_60_aux_data.py:173: DeprecationWarning: The parameter "ax" will be removed in 0.13.0 release of Nilearn. Please use the parameter "axes" instead.
      fig = plot_design_matrix(design_matrix, ax=ax1)




.. GENERATED FROM PYTHON SOURCE LINES 177-187

Conclusion
----------

We have demonstrated how to load auxiliary data from a SNIRF
file. We illustrated how to include this data in your design matrix
for further GLM analysis. We do not go through a full GLM analysis,
instead the reader is directed to the dedicated :ref:`GLM tutorial <tut-fnirs-hrf>`.
The auxiliary data may need to be treated before being included in your analysis,
for example you may need to normalise before inclusion in statistical analysis etc,
but this is beyond the scope of this tutorial.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.769 seconds)

**Estimated memory usage:**  471 MB


.. _sphx_glr_download_auto_examples_general_plot_60_aux_data.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mne-tools/mne-nirs/gh-pages?filepath=stable/notebooks/auto_examples/general/plot_60_aux_data.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_60_aux_data.ipynb <plot_60_aux_data.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_60_aux_data.py <plot_60_aux_data.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_60_aux_data.zip <plot_60_aux_data.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
