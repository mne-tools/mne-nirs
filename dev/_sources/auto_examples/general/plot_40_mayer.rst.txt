
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/general/plot_40_mayer.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_general_plot_40_mayer.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_general_plot_40_mayer.py:


.. _tut-mayer:

Mayer Wave Parametrisation
==========================

.. sidebar:: Cite the FOOOF authors

   This tutorial is only possible due to the excellent and generous work of
   the FOOOF authors. Please visit their site https://fooof-tools.github.io/fooof.
   Also be sure to cite their various papers:

   Donoghue, Thomas, et al. "Parameterizing neural power spectra into periodic and aperiodic components." Nature neuroscience 23.12 (2020): 1655-1665.

   Donoghue, Thomas, Julio Dominguez, and Bradley Voytek. "Electrophysiological frequency band ratio measures conflate periodic and aperiodic neural activity." Eneuro 7.6 (2020).

Mayer waves are spontaneous oscillations in arterial blood pressure with a
frequency of ~0.1 Hz (Ghali and Ghali, 2020; Julien, 2006; Yucel, 2016).
Mayer waves are not easily removed from hemodynamic signatures of brain
activity as they tend to occur on a time course often confounded with
the frequency of a sensory task, for example, and/or the
cortical hemodynamic response to that task.

This example demonstrates how to use the
Fitting Oscillations & One Over F (FOOOF)
:footcite:`donoghue2020parameterizing`
method to quanitfy Mayer wave parameters in fNIRS data.
This is based on the description provided in
:footcite:`luke2021characterization`.

This tutorial is heavily based on the tutorials provided by the FOOOF
authors over at https://fooof-tools.github.io/fooof.
You should read their excellent documentation. Their work should be considered
the primary resource, and this is just an example of how to apply it to fNIRS
data for the purpose of extracting Mayer waves oscillation parameters.

.. GENERATED FROM PYTHON SOURCE LINES 37-53

.. code-block:: Python


    # Authors: Robert Luke <mail@robertluke.net>
    #
    # License: BSD (3-clause)

    import os

    import matplotlib.pyplot as plt
    import mne
    import numpy as np
    from fooof import FOOOF
    from mne.preprocessing.nirs import beer_lambert_law, optical_density

    from mne_nirs.channels import get_long_channels
    from mne_nirs.preprocessing import quantify_mayer_fooof





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/circleci/project/examples/general/plot_40_mayer.py:47: DeprecationWarning: 
    The `fooof` package is being deprecated and replaced by the `specparam` (spectral parameterization) package.
    This version of `fooof` (1.1) is fully functional, but will not be further updated.
    New projects are recommended to update to using `specparam` (see Changelog for details).
      from fooof import FOOOF




.. GENERATED FROM PYTHON SOURCE LINES 54-58

Import and preprocess data
--------------------------

We read in the data and convert to haemoglobin concentration.

.. GENERATED FROM PYTHON SOURCE LINES 58-71

.. code-block:: Python


    fnirs_data_folder = mne.datasets.fnirs_motor.data_path()
    fnirs_raw_dir = os.path.join(fnirs_data_folder, "Participant-1")
    raw = mne.io.read_raw_nirx(fnirs_raw_dir, verbose=True).load_data()

    raw = optical_density(raw)
    raw.resample(2)
    raw = beer_lambert_law(raw, ppf=0.1)
    raw = raw.pick(picks="hbo")
    raw = get_long_channels(raw, min_dist=0.025, max_dist=0.045)
    raw






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading /home/circleci/mne_data/MNE-fNIRS-motor-data/Participant-1


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <script type="text/javascript">
        const toggleVisibility = (className) => {

      const elements = document.querySelectorAll(`.${className}`)

      elements.forEach(element => {
        if (element.classList.contains('repr-section-header')) {
          // Don't collapse the section header row.
           return
        }
        if (element.classList.contains('repr-element-collapsed')) {
          // Force a reflow to ensure the display change takes effect before removing the class
          element.classList.remove('repr-element-collapsed')
          element.offsetHeight // This forces the browser to recalculate layout
          element.classList.remove('repr-element-faded')
        } else {
          // Start transition to hide the element
          element.classList.add('repr-element-faded')
          element.addEventListener('transitionend', handler = (e) => {
            if (e.propertyName === 'opacity' && getComputedStyle(element).opacity === '0.2') {
              element.classList.add('repr-element-collapsed')
              element.removeEventListener('transitionend', handler)
            }
          });
        }
      });

      // Take care of button (adjust caret)
      const button = document.querySelectorAll(`.repr-section-header.${className} > th.repr-section-toggle-col > button`)[0]
      button.classList.toggle('collapsed')

      // Take care of the tooltip of the section header row
      const sectionHeaderRow = document.querySelectorAll(`tr.repr-section-header.${className}`)[0]
      sectionHeaderRow.classList.toggle('collapsed')
      sectionHeaderRow.title = sectionHeaderRow.title === 'Hide section' ? 'Show section' : 'Hide section'
    }
    </script>

    <style type="text/css">
        table.repr.table.table-hover.table-striped.table-sm.table-responsive.small {
      /* Don't make rows wider than they need to be. */
      display: inline;
    }

    table > tbody > tr.repr-element > td {
      /* Apply a tighter layout to the table cells. */
      padding-top: 0.1rem;
      padding-bottom: 0.1rem;
      padding-right: 1rem;
    }

    table > tbody > tr > td.repr-section-toggle-col {
      /* Remove background and border of the first cell in every row
         (this row is only used for the collapse / uncollapse caret)

         TODO: Need to find a good solution for VS Code that works in both
               light and dark mode. */
      border-color: transparent;
      --bs-table-accent-bg: transparent;
    }

    tr.repr-section-header {
      /* Remove stripes from section header rows */
      background-color: transparent;
      border-color: transparent;
      --bs-table-striped-bg: transparent;
      cursor: pointer;
    }

    tr.repr-section-header > th {
      text-align: left !important;
      vertical-align: middle;
    }

    .repr-element, tr.repr-element > td {
      opacity: 1;
      text-align: left !important;
    }

    .repr-element-faded {
      transition: 0.3s ease;
      opacity: 0.2;
    }

    .repr-element-collapsed {
      display: none;
    }

    /* Collapse / uncollapse button and the caret it contains. */
    .repr-section-toggle-col button {
      cursor: pointer;
      width: 1rem;
      background-color: transparent;
      border-color: transparent;
    }

    span.collapse-uncollapse-caret {
      width: 1rem;
      height: 1rem;
      display: block;
      background-repeat: no-repeat;
      background-position: left;
      background-size: contain;
    }

    /* The collapse / uncollapse carets were copied from the free Font Awesome collection and adjusted. */

    /* Default to black carets for light mode */
    .repr-section-toggle-col > button.collapsed > span.collapse-uncollapse-caret {
      background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="black" d="M246.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-9.2-9.2-22.9-11.9-34.9-6.9s-19.8 16.6-19.8 29.6l0 256c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l128-128z"/></svg>');
    }

    .repr-section-toggle-col
      > button:not(.collapsed)
      > span.collapse-uncollapse-caret {
      background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="black" d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg>');
    }

    /* Use white carets for dark mode */
    @media (prefers-color-scheme: dark) {
      .repr-section-toggle-col > button.collapsed > span.collapse-uncollapse-caret {
        background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="white" d="M246.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-9.2-9.2-22.9-11.9-34.9-6.9s-19.8 16.6-19.8 29.6l0 256c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l128-128z"/></svg>');
      }

      .repr-section-toggle-col
        > button:not(.collapsed)
        > span.collapse-uncollapse-caret {
        background-image: url('data:image/svg+xml;charset=utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="white" d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg>');
      }
    }

    .channel-names-btn {
      padding: 0;
      border: none;
      background: none;
      text-decoration: underline;
      text-decoration-style: dashed;
      cursor: pointer;
      color: #0d6efd;
    }

    .channel-names-btn:hover {
      color: #0a58ca;
    }
    </style>



    <table class="repr table table-hover table-striped table-sm table-responsive small">
    







    <tr class="repr-section-header general-159c2cfa-a271-4697-ab2f-f1e2836057e7"  title="Hide section" 
        onclick="toggleVisibility('general-159c2cfa-a271-4697-ab2f-f1e2836057e7')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>General</strong>
        </th>
    </tr>

    <tr class="repr-element general-159c2cfa-a271-4697-ab2f-f1e2836057e7 ">
        <td class="repr-section-toggle-col"></td>
        <td>Filename(s)</td>
        <td>
        
            Participant-1
        
        
        </td>
    </tr>

    <tr class="repr-element general-159c2cfa-a271-4697-ab2f-f1e2836057e7 ">
        <td class="repr-section-toggle-col"></td>
        <td>MNE object type</td>
        <td>RawNIRX</td>
    </tr>
    <tr class="repr-element general-159c2cfa-a271-4697-ab2f-f1e2836057e7 ">
        <td class="repr-section-toggle-col"></td>
        <td>Measurement date</td>
    
        <td>2019-11-02 at 13:16:16 UTC</td>
    
    </tr>
    <tr class="repr-element general-159c2cfa-a271-4697-ab2f-f1e2836057e7 ">
        <td class="repr-section-toggle-col"></td>
        <td>Participant</td>
    
    
        <td>P1</td>
    
    
    </tr>
    <tr class="repr-element general-159c2cfa-a271-4697-ab2f-f1e2836057e7 ">
        <td class="repr-section-toggle-col"></td>
        <td>Experimenter</td>
    
        <td>Unknown</td>
    
    </tr>
    







    <tr class="repr-section-header acquisition-d23cf1f0-3630-4e2f-b715-ca9f4c253bde" 
        title="Hide section"  onclick="toggleVisibility('acquisition-d23cf1f0-3630-4e2f-b715-ca9f4c253bde')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>Acquisition</strong>
        </th>
    </tr>

    <tr class="repr-element acquisition-d23cf1f0-3630-4e2f-b715-ca9f4c253bde ">
        <td class="repr-section-toggle-col"></td>
        <td>Duration</td>
        <td>00:49:34 (HH:MM:SS)</td>
    </tr>








    <tr class="repr-element acquisition-d23cf1f0-3630-4e2f-b715-ca9f4c253bde ">
        <td class="repr-section-toggle-col"></td>
        <td>Sampling frequency</td>
        <td>2.00 Hz</td>
    </tr>


    <tr class="repr-element acquisition-d23cf1f0-3630-4e2f-b715-ca9f4c253bde ">
        <td class="repr-section-toggle-col"></td>
        <td>Time points</td>
        <td>5,949</td>
    </tr>


    







    <tr class="repr-section-header channels-f278d505-f579-43f9-ad23-ef0d795e9bc3"  title="Hide section" 
        onclick="toggleVisibility('channels-f278d505-f579-43f9-ad23-ef0d795e9bc3')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>Channels</strong>
        </th>
    </tr>


    <tr class="repr-element channels-f278d505-f579-43f9-ad23-ef0d795e9bc3 ">
        <td class="repr-section-toggle-col"></td>
        <td>Oxyhemoglobin</td>
        <td>
            <button class="channel-names-btn" onclick="alert('Good Oxyhemoglobin:\n\nS1_D1&nbsp;hbo, S1_D2&nbsp;hbo, S1_D3&nbsp;hbo, S2_D1&nbsp;hbo, S2_D3&nbsp;hbo, S2_D4&nbsp;hbo, S3_D2&nbsp;hbo, S3_D3&nbsp;hbo, S4_D3&nbsp;hbo, S4_D4&nbsp;hbo, S5_D5&nbsp;hbo, S5_D6&nbsp;hbo, S5_D7&nbsp;hbo, S6_D5&nbsp;hbo, S6_D7&nbsp;hbo, S6_D8&nbsp;hbo, S7_D6&nbsp;hbo, S7_D7&nbsp;hbo, S8_D7&nbsp;hbo, S8_D8&nbsp;hbo')" title="(Click to open in popup)&#13;&#13;S1_D1&nbsp;hbo, S1_D2&nbsp;hbo, S1_D3&nbsp;hbo, S2_D1&nbsp;hbo, S2_D3&nbsp;hbo, S2_D4&nbsp;hbo, S3_D2&nbsp;hbo, S3_D3&nbsp;hbo, S4_D3&nbsp;hbo, S4_D4&nbsp;hbo, S5_D5&nbsp;hbo, S5_D6&nbsp;hbo, S5_D7&nbsp;hbo, S6_D5&nbsp;hbo, S6_D7&nbsp;hbo, S6_D8&nbsp;hbo, S7_D6&nbsp;hbo, S7_D7&nbsp;hbo, S8_D7&nbsp;hbo, S8_D8&nbsp;hbo">
                20
            </button>

        
        </td>
    </tr>


    <tr class="repr-element channels-f278d505-f579-43f9-ad23-ef0d795e9bc3 ">
        <td class="repr-section-toggle-col"></td>
        <td>Head & sensor digitization</td>
    
        <td>31 points</td>
    
    </tr>
    







    <tr class="repr-section-header filters-b9480fc1-dc3f-47d5-ac7d-28163e24d0e5"  title="Hide section" 
        onclick="toggleVisibility('filters-b9480fc1-dc3f-47d5-ac7d-28163e24d0e5')">
        <th class="repr-section-toggle-col">
            <button>
            
                <span class="collapse-uncollapse-caret"></span>
            </button>
        </th>
        <th colspan="2">
            <strong>Filters</strong>
        </th>
    </tr>

    <tr class="repr-element filters-b9480fc1-dc3f-47d5-ac7d-28163e24d0e5 ">
        <td class="repr-section-toggle-col"></td>
        <td>Highpass</td>
        <td>0.00 Hz</td>
    </tr>


    <tr class="repr-element filters-b9480fc1-dc3f-47d5-ac7d-28163e24d0e5 ">
        <td class="repr-section-toggle-col"></td>
        <td>Lowpass</td>
        <td>1.00 Hz</td>
    </tr>


    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 72-92

Process data with FOOOF
-----------------------

Next we estimate the power spectral density of the data and pass this to
the FOOOF algorithm.

I recommend using the FOOOF algorithm as provided by the authors rather
than reimplementation or custom plotting etc. Their code is of excellent
quality, well maintained, thoroughly documented, and they have considered
many edge cases.

Below we plot the spectrum of the data, the FOOOF fit of oscillations,
and aperiodic component. Note the bump at 0.1 Hz that reflects the Mayer
wave activity.

Note that the activity is not a perfect peak at 0.1 Hz, but is spread
across neighbouring frequencies. Additionally, the peak does not occur
at exactly 0.1 Hz, but instead seems to peak at approximately 0.09 Hz.
The shaded area illustrates the oscillation fitted by the FOOOF algorithm,
it matches well to the data.

.. GENERATED FROM PYTHON SOURCE LINES 92-122

.. code-block:: Python



    def scale_up_spectra(spectra, freqs):
        """
        FOOOF requires the frequency values to be higher than the fNIRS data
        permits, so we scale the values up by 10 here, and then will scale
        the frequency values down by 10 later.
        """
        freqs = freqs * 10
        return spectra, freqs


    # Prepare data for FOOOF
    psd = raw.compute_psd(fmin=0.001, fmax=1.0, tmin=0, tmax=None, n_overlap=300, n_fft=600)
    spectra, freqs = psd.get_data(return_freqs=True)
    spectra, freqs = scale_up_spectra(spectra, freqs)

    # Specify the model, note that frequency values here are times 10
    fm = FOOOF(peak_width_limits=(0.5, 12.0))
    # Set the frequency range to fit the model, again these are times 10
    freq_range = [0.001, 7]

    fm.fit(freqs, np.mean(spectra, axis=0), freq_range)

    fig, axs = plt.subplots(1, 1, figsize=(10, 5))
    fm.plot(plot_peaks="shade", data_kwargs={"color": "orange"}, ax=axs)
    # Correct for x10 scaling above
    plt.xticks([0, 1, 2, 3, 4, 5, 6], [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6])





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_40_mayer_001.png
   :alt: plot 40 mayer
   :srcset: /auto_examples/general/images/sphx_glr_plot_40_mayer_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ([<matplotlib.axis.XTick object at 0x7fdfde733460>, <matplotlib.axis.XTick object at 0x7fdfde732d70>, <matplotlib.axis.XTick object at 0x7fdfde733e80>, <matplotlib.axis.XTick object at 0x7fdfde2eb9a0>, <matplotlib.axis.XTick object at 0x7fdfde2e9570>, <matplotlib.axis.XTick object at 0x7fdfde2eab60>, <matplotlib.axis.XTick object at 0x7fe04d650910>], [Text(0, 0, '0.0'), Text(1, 0, '0.1'), Text(2, 0, '0.2'), Text(3, 0, '0.3'), Text(4, 0, '0.4'), Text(5, 0, '0.5'), Text(6, 0, '0.6')])



.. GENERATED FROM PYTHON SOURCE LINES 123-132

Use MNE-NIRS to quantify Mayer wave oscillation
-----------------------------------------------

MNE-NIRS provides a convenient function to estimate the Mayer wave
parameters that takes care of the frequency scaling and selects the component
most likely associated with the Mayer wave. It returns this data in a pandas
dataframe for your convenience.
It uses the FOOOF algorithm under the hood, so ensure you cite the original
authors if you use this function.

.. GENERATED FROM PYTHON SOURCE LINES 132-136

.. code-block:: Python


    quantify_mayer_fooof(raw.pick("hbo"), extra_df_fields={"Study": "Online tutorial"})







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Centre Frequency</th>
          <th>Bandwidth</th>
          <th>Power</th>
          <th>Chromaphore</th>
          <th>Study</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.090168</td>
          <td>0.069643</td>
          <td>0.763865</td>
          <td>hbo</td>
          <td>Online tutorial</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 137-161

Conclusion
----------

We have demonstrated how to use the FOOOF algorithm for quantifying Mayer
wave parameters, and highlighted the `quantify_mayer_fooof` for conveniently
applying this analysis to fNIRS data with MNE-NIRS.

An example measurement illustrated what the presence of a Mayer wave
looks like with a power spectral density. The measurement also illustrated that the
Mayer wave is not a perfect sinusoid, as evidenced by the broad spectral content.
Further, the example illustrated that the Mayer wave is not always precisely locked
to 0.1 Hz, both visual inspection and FOOOF quantification indicate a 0.09 Hz
centre frequency.

See the article Luke (2021) :footcite:`luke2021characterization` for further
details on this analysis approach, and normative data from over 300 fNIRS
measurements. This article also demonstrates that using short-channel
systemic component correction algorithms can reduce the Mayer wave component
in the signal (see also Yucel 2016).
See both the
:ref:`GLM tutorial <tut-fnirs-hrf>`
and
:ref:`signal enhancement tutorial <tut-fnirs-enhance>`
for how to use short channels in either a GLM or averaging analysis with MNE-NIRS.

.. GENERATED FROM PYTHON SOURCE LINES 164-168

Bibliography
-----------------------------------------------

.. footbibliography::


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.920 seconds)

**Estimated memory usage:**  430 MB


.. _sphx_glr_download_auto_examples_general_plot_40_mayer.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mne-tools/mne-nirs/gh-pages?filepath=stable/notebooks/auto_examples/general/plot_40_mayer.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_40_mayer.ipynb <plot_40_mayer.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_40_mayer.py <plot_40_mayer.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_40_mayer.zip <plot_40_mayer.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
