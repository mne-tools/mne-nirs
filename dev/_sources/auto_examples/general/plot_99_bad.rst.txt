
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/general/plot_99_bad.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_general_plot_99_bad.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_general_plot_99_bad.py:


.. _tut-fnirs-processing-bad:

Importance of Controls and Parameter Selection
==============================================

.. warning:: DO NOT USE THIS SCRIPT TO PROCESS YOUR DATA

.. sidebar:: Relevant literature

   Huppert TJ. Commentary on the statistical properties of noise and its
   implication on general linear models in functional near-infrared
   spectroscopy. Neurophotonics. 2016;3(1)

This tutorial demonstrates how **NOT** to process your
functional near-infrared spectroscopy (fNIRS)
data.
Here I demonstrate that with a simple process pipelines even random noise
can look like a canonical haemodynamic response.

This tutorial was written to motivate further interest in to what affect
signal processing has on our data. And to provide a concrete example
about why you should understand your analysis and not vary parameters to meet
preconceived ideas of what your data should look like.
I recommend specifying analysis parameters in advance along with your experimental
protocol. Hopefully this tutorial also highlights the importance of
including a control condition in your experimental design.

The
:ref:`MNE fNIRS waveform tutorial <mne:tut-fnirs-processing>`
is used as a basis for this analysis, so most of the document looks similar.
However, at the midpoint we replace the real data with noise and demonstrate
that without careful attention to the analysis parameter it would still
appear as if a fNIRS response is observed.

.. GENERATED FROM PYTHON SOURCE LINES 36-58

.. code-block:: Python

    # sphinx_gallery_thumbnail_number = 7


    # Authors: Robert Luke <mail@robertluke.net>
    #
    # License: BSD (3-clause)

    import os

    import mne
    import numpy as np

    import mne_nirs

    np.random.seed(1)

    fnirs_data_folder = mne.datasets.fnirs_motor.data_path()
    fnirs_cw_amplitude_dir = os.path.join(fnirs_data_folder, "Participant-1")
    raw_intensity = mne.io.read_raw_nirx(fnirs_cw_amplitude_dir, verbose=True)
    raw_intensity.load_data()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading /home/circleci/mne_data/MNE-fNIRS-motor-data/Participant-1


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <script type="text/javascript">
        // must be `var` (not `const`) because this can get embedded multiple times on a page
    var toggleVisibility = (className) => {

        const elements = document.querySelectorAll(`.${className}`);

        elements.forEach(element => {
            if (element.classList.contains("mne-repr-section-header")) {
                return  // Don't collapse the section header row
            }
            element.classList.toggle("mne-repr-collapsed");
        });

        // trigger caret to rotate
        var sel = `.mne-repr-section-header.${className} > th.mne-repr-section-toggle > button`;
        const button = document.querySelector(sel);
        button.classList.toggle("collapsed");

        // adjust tooltip
        sel = `tr.mne-repr-section-header.${className}`;
        const secHeadRow = document.querySelector(sel);
        secHeadRow.classList.toggle("collapsed");
        secHeadRow.title = secHeadRow.title === "Hide section" ? "Show section" : "Hide section";
    }
    </script>

    <style type="text/css">
        /*
    Styles in this section apply both to the sphinx-built website docs and to notebooks
    rendered in an IDE or in Jupyter. In our web docs, styles here are complemented by
    doc/_static/styles.css and other CSS files (e.g. from the sphinx theme, sphinx-gallery,
    or bootstrap). In IDEs/Jupyter, those style files are unavailable, so only the rules in
    this file apply (plus whatever default styling the IDE applies).
    */
    .mne-repr-table {
        display: inline;  /* prevent using full container width */
    }
    .mne-repr-table tr.mne-repr-section-header > th {
        padding-top: 1rem;
        text-align: left;
        vertical-align: middle;
    }
    .mne-repr-section-toggle > button {
        all: unset;
        display: block;
        height: 1rem;
        width: 1rem;
    }
    .mne-repr-section-toggle > button > svg {
        height: 60%;
    }

    /* transition (rotation) effects on the collapser button */
    .mne-repr-section-toggle > button.collapsed > svg {
        transition: 0.1s ease-out;
        transform: rotate(-90deg);
    }
    .mne-repr-section-toggle > button:not(.collapsed) > svg {
        transition: 0.1s ease-out;
        transform: rotate(0deg);
    }

    /* hide collapsed table rows */
    .mne-repr-collapsed {
        display: none;
    }


    @layer {
        /*
        Selectors in a `@layer` will always be lower-precedence than selectors outside the
        layer. So even though e.g. `div.output_html` is present in the sphinx-rendered
        website docs, the styles here won't take effect there as long as some other rule
        somewhere in the page's CSS targets the same element.

        In IDEs or Jupyter notebooks, though, the CSS files from the sphinx theme,
        sphinx-gallery, and bootstrap are unavailable, so these styles will apply.

        Notes:

        - the selector `.accordion-body` is for MNE Reports
        - the selector `.output_html` is for VSCode's notebook interface
        - the selector `.jp-RenderedHTML` is for Jupyter notebook
        - variables starting with `--theme-` are VSCode-specific.
        - variables starting with `--jp-` are Jupyter styles, *some of which* are also
          available in VSCode. Here we try the `--theme-` variable first, then fall back to
          the `--jp-` ones.
        */
        .mne-repr-table {
            --mne-toggle-color: var(--theme-foreground, var(--jp-ui-font-color1));
            --mne-button-bg-color: var(--theme-button-background, var(--jp-info-color0, var(--jp-content-link-color)));
            --mne-button-fg-color: var(--theme-button-foreground, var(--jp-ui-inverse-font-color0, var(--jp-editor-background)));
            --mne-button-hover-bg-color: var(--theme-button-hover-background, var(--jp-info-color1));
            --mne-button-radius: var(--jp-border-radius, 0.25rem);
        }
        /* chevron position/alignment; in VSCode it looks ok without adjusting */
        .accordion-body .mne-repr-section-toggle > button,
        .jp-RenderedHTML .mne-repr-section-toggle > button {
            padding: 0 0 45% 25% !important;
        }
        /* chevron color; MNE Report doesn't have light/dark mode */
        div.output_html .mne-repr-section-toggle > button > svg > path,
        .jp-RenderedHTML .mne-repr-section-toggle > button > svg > path {
            fill: var(--mne-toggle-color);
        }
        .accordion-body .mne-ch-names-btn,
        div.output_html .mne-ch-names-btn,
        .jp-RenderedHTML .mne-ch-names-btn {
            -webkit-border-radius: var(--mne-button-radius);
            -moz-border-radius: var(--mne-button-radius);
            border-radius: var(--mne-button-radius);
            border: none;
            background-image: none;
            background-color: var(--mne-button-bg-color);
            color: var(--mne-button-fg-color);
            font-size: inherit;
            min-width: 1.5rem;
            padding: 0.25rem;
            text-align: center;
            text-decoration: none;
        }
        .accordion-body .mne-ch-names-btn:hover,
        div.output_html .mne.ch-names-btn:hover,
        .jp-RenderedHTML .mne-ch-names-btn:hover {
            background-color: var(--mne-button-hover-bg-color);
            text-decoration: underline;
        }
        .accordion-body .mne-ch-names-btn:focus-visible,
        div.output_html .mne-ch-names-btn:focus-visible,
        .jp-RenderedHTML .mne-ch-names-btn:focus-visible {
            outline: 0.1875rem solid var(--mne-button-bg-color) !important;
            outline-offset: 0.1875rem !important;
        }
    }
    </style>



    <table class="table mne-repr-table">
    







    <tr class="mne-repr-section-header general-6fca2086-ab9d-45dd-a346-a2f00bc2c20d"
         title="Hide section" 
        onclick="toggleVisibility('general-6fca2086-ab9d-45dd-a346-a2f00bc2c20d')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>General</strong>
        </th>
    </tr>


    <tr class="repr-element general-6fca2086-ab9d-45dd-a346-a2f00bc2c20d ">
        <td class="mne-repr-section-toggle"></td>
        <td>Filename(s)</td>
        <td>
        
            Participant-1
        
        
        </td>
    </tr>

    <tr class="repr-element general-6fca2086-ab9d-45dd-a346-a2f00bc2c20d ">
        <td class="mne-repr-section-toggle"></td>
        <td>MNE object type</td>
        <td>RawNIRX</td>
    </tr>
    <tr class="repr-element general-6fca2086-ab9d-45dd-a346-a2f00bc2c20d ">
        <td class="mne-repr-section-toggle"></td>
        <td>Measurement date</td>
    
        <td>2019-11-02 at 13:16:16 UTC</td>
    
    </tr>
    <tr class="repr-element general-6fca2086-ab9d-45dd-a346-a2f00bc2c20d ">
        <td class="mne-repr-section-toggle"></td>
        <td>Participant</td>
    
    
        <td>P1</td>
    
    
    </tr>
    <tr class="repr-element general-6fca2086-ab9d-45dd-a346-a2f00bc2c20d ">
        <td class="mne-repr-section-toggle"></td>
        <td>Experimenter</td>
    
        <td>Unknown</td>
    
    </tr>
    







    <tr class="mne-repr-section-header acquisition-47ec42ce-26c4-4343-9639-f10568857bc5"
         title="Hide section" 
        onclick="toggleVisibility('acquisition-47ec42ce-26c4-4343-9639-f10568857bc5')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Acquisition</strong>
        </th>
    </tr>


    <tr class="repr-element acquisition-47ec42ce-26c4-4343-9639-f10568857bc5 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Duration</td>
        <td>00:49:35 (HH:MM:SS)</td>
    </tr>








    <tr class="repr-element acquisition-47ec42ce-26c4-4343-9639-f10568857bc5 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Sampling frequency</td>
        <td>7.81 Hz</td>
    </tr>


    <tr class="repr-element acquisition-47ec42ce-26c4-4343-9639-f10568857bc5 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Time points</td>
        <td>23,239</td>
    </tr>


    







    <tr class="mne-repr-section-header channels-81a5e9ff-e00d-4233-80ec-b975262e3095"
         title="Hide section" 
        onclick="toggleVisibility('channels-81a5e9ff-e00d-4233-80ec-b975262e3095')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Channels</strong>
        </th>
    </tr>


    
    <tr class="repr-element channels-81a5e9ff-e00d-4233-80ec-b975262e3095 ">
        <td class="mne-repr-section-toggle"></td>
        <td>fNIRS (CW amplitude)</td>
        <td>
            <button class="mne-ch-names-btn sd-sphinx-override sd-btn sd-btn-info sd-text-wrap sd-shadow-sm" onclick="alert('Good fNIRS (CW amplitude):\n\nS1_D1&nbsp;760, S1_D1&nbsp;850, S1_D2&nbsp;760, S1_D2&nbsp;850, S1_D3&nbsp;760, S1_D3&nbsp;850, S1_D9&nbsp;760, S1_D9&nbsp;850, S2_D1&nbsp;760, S2_D1&nbsp;850, S2_D3&nbsp;760, S2_D3&nbsp;850, S2_D4&nbsp;760, S2_D4&nbsp;850, S2_D10&nbsp;760, S2_D10&nbsp;850, S3_D2&nbsp;760, S3_D2&nbsp;850, S3_D3&nbsp;760, S3_D3&nbsp;850, S3_D11&nbsp;760, S3_D11&nbsp;850, S4_D3&nbsp;760, S4_D3&nbsp;850, S4_D4&nbsp;760, S4_D4&nbsp;850, S4_D12&nbsp;760, S4_D12&nbsp;850, S5_D5&nbsp;760, S5_D5&nbsp;850, S5_D6&nbsp;760, S5_D6&nbsp;850, S5_D7&nbsp;760, S5_D7&nbsp;850, S5_D13&nbsp;760, S5_D13&nbsp;850, S6_D5&nbsp;760, S6_D5&nbsp;850, S6_D7&nbsp;760, S6_D7&nbsp;850, S6_D8&nbsp;760, S6_D8&nbsp;850, S6_D14&nbsp;760, S6_D14&nbsp;850, S7_D6&nbsp;760, S7_D6&nbsp;850, S7_D7&nbsp;760, S7_D7&nbsp;850, S7_D15&nbsp;760, S7_D15&nbsp;850, S8_D7&nbsp;760, S8_D7&nbsp;850, S8_D8&nbsp;760, S8_D8&nbsp;850, S8_D16&nbsp;760, S8_D16&nbsp;850')" title="(Click to open in popup)&#13;&#13;S1_D1&nbsp;760, S1_D1&nbsp;850, S1_D2&nbsp;760, S1_D2&nbsp;850, S1_D3&nbsp;760, S1_D3&nbsp;850, S1_D9&nbsp;760, S1_D9&nbsp;850, S2_D1&nbsp;760, S2_D1&nbsp;850, S2_D3&nbsp;760, S2_D3&nbsp;850, S2_D4&nbsp;760, S2_D4&nbsp;850, S2_D10&nbsp;760, S2_D10&nbsp;850, S3_D2&nbsp;760, S3_D2&nbsp;850, S3_D3&nbsp;760, S3_D3&nbsp;850, S3_D11&nbsp;760, S3_D11&nbsp;850, S4_D3&nbsp;760, S4_D3&nbsp;850, S4_D4&nbsp;760, S4_D4&nbsp;850, S4_D12&nbsp;760, S4_D12&nbsp;850, S5_D5&nbsp;760, S5_D5&nbsp;850, S5_D6&nbsp;760, S5_D6&nbsp;850, S5_D7&nbsp;760, S5_D7&nbsp;850, S5_D13&nbsp;760, S5_D13&nbsp;850, S6_D5&nbsp;760, S6_D5&nbsp;850, S6_D7&nbsp;760, S6_D7&nbsp;850, S6_D8&nbsp;760, S6_D8&nbsp;850, S6_D14&nbsp;760, S6_D14&nbsp;850, S7_D6&nbsp;760, S7_D6&nbsp;850, S7_D7&nbsp;760, S7_D7&nbsp;850, S7_D15&nbsp;760, S7_D15&nbsp;850, S8_D7&nbsp;760, S8_D7&nbsp;850, S8_D8&nbsp;760, S8_D8&nbsp;850, S8_D16&nbsp;760, S8_D16&nbsp;850">
                56
            </button>

        
        </td>
    </tr>


    <tr class="repr-element channels-81a5e9ff-e00d-4233-80ec-b975262e3095 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Head & sensor digitization</td>
    
        <td>31 points</td>
    
    </tr>
    







    <tr class="mne-repr-section-header filters-098bb730-85bf-44dc-a064-746f317eaabc"
         title="Hide section" 
        onclick="toggleVisibility('filters-098bb730-85bf-44dc-a064-746f317eaabc')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Filters</strong>
        </th>
    </tr>


    <tr class="repr-element filters-098bb730-85bf-44dc-a064-746f317eaabc ">
        <td class="mne-repr-section-toggle"></td>
        <td>Highpass</td>
        <td>0.00 Hz</td>
    </tr>


    <tr class="repr-element filters-098bb730-85bf-44dc-a064-746f317eaabc ">
        <td class="mne-repr-section-toggle"></td>
        <td>Lowpass</td>
        <td>3.91 Hz</td>
    </tr>


    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 59-66

Selecting channels appropriate for detecting neural responses
-------------------------------------------------------------

First we remove channels that are too close together (short channels) to
detect a neural response (less than 1 cm distance between optodes).
These short channels can be seen in the figure above.
To achieve this we pick all the channels that are not considered to be short.

.. GENERATED FROM PYTHON SOURCE LINES 66-77

.. code-block:: Python


    picks = mne.pick_types(raw_intensity.info, meg=False, fnirs=True)
    dists = mne.preprocessing.nirs.source_detector_distances(
        raw_intensity.info, picks=picks
    )
    raw_intensity.pick(picks[dists > 0.01])
    raw_intensity.plot(
        n_channels=len(raw_intensity.ch_names), duration=500, show_scrollbars=False
    )





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_001.png
   :alt: Raw plot
   :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <mne_qt_browser._pg_figure.MNEQtBrowser object at 0x7f9c85613910>



.. GENERATED FROM PYTHON SOURCE LINES 78-82

Converting from raw intensity to optical density
------------------------------------------------

The raw intensity values are then converted to optical density.

.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: Python


    raw_od = mne.preprocessing.nirs.optical_density(raw_intensity)
    raw_od.plot(n_channels=len(raw_od.ch_names), duration=500, show_scrollbars=False)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_002.png
   :alt: Raw plot
   :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <mne_qt_browser._pg_figure.MNEQtBrowser object at 0x7f9cb49f2290>



.. GENERATED FROM PYTHON SOURCE LINES 88-93

Converting from optical density to haemoglobin
----------------------------------------------

Next we convert the optical density data to haemoglobin concentration using
the modified Beer-Lambert law.

.. GENERATED FROM PYTHON SOURCE LINES 93-98

.. code-block:: Python


    raw_haemo = mne.preprocessing.nirs.beer_lambert_law(raw_od, ppf=0.1)
    raw_haemo.plot(n_channels=len(raw_haemo.ch_names), duration=500, show_scrollbars=False)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_003.png
   :alt: Raw plot
   :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <mne_qt_browser._pg_figure.MNEQtBrowser object at 0x7f9c866c45e0>



.. GENERATED FROM PYTHON SOURCE LINES 99-104

!!!!!!Replace real data with white noise!!!!!
----------------------------------------------

Here we replace the signals with white noise.
We make the HbR white noise 3 time smaller than HbO as is commonly observed.

.. GENERATED FROM PYTHON SOURCE LINES 104-110

.. code-block:: Python



    raw_haemo._data = np.random.randn(40, 23239) / 1.0e6 * 1
    raw_haemo._data[::2, :] = np.random.randn(20, 23239) / 1.0e6 * 3









.. GENERATED FROM PYTHON SOURCE LINES 111-117

Removing heart rate from signal (BAD DONT COPY)
-----------------------------------------------

This analysis is BAD and is provided just as a demonstration.
Do not do this!!


.. GENERATED FROM PYTHON SOURCE LINES 117-125

.. code-block:: Python


    fig = raw_haemo.compute_psd().plot(average=True, amplitude=False)
    fig.suptitle("Before filtering", weight="bold", size="x-large")
    raw_haemo = raw_haemo.filter(0.05, 0.1, h_trans_bandwidth=0.2, l_trans_bandwidth=0.02)
    fig = raw_haemo.compute_psd().plot(average=True, amplitude=False)
    fig.suptitle("After filtering", weight="bold", size="x-large")





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_004.png
         :alt: Before filtering, Oxyhemoglobin, Deoxyhemoglobin
         :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_005.png
         :alt: After filtering, Oxyhemoglobin, Deoxyhemoglobin
         :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_005.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 0.993055, 'After filtering')



.. GENERATED FROM PYTHON SOURCE LINES 126-130

Apply Cui negative correlation method
-------------------------------------

Here we apply the Cui signal enhancement technique.

.. GENERATED FROM PYTHON SOURCE LINES 130-134

.. code-block:: Python


    raw_haemo = mne_nirs.signal_enhancement.enhance_negative_correlation(raw_haemo)









.. GENERATED FROM PYTHON SOURCE LINES 135-144

Extract epochs
--------------

Now that the signal has been converted to relative haemoglobin concentration,
and the unwanted heart rate component has been removed, we can extract epochs
related to each of the experimental conditions.

First we extract the events of interest and visualise them to ensure they are
correct.

.. GENERATED FROM PYTHON SOURCE LINES 144-152

.. code-block:: Python


    events, _ = mne.events_from_annotations(
        raw_haemo, event_id={"1.0": 1, "2.0": 2, "3.0": 3}
    )
    event_dict = {"Control": 1, "Tapping/Left": 2, "Tapping/Right": 3}
    fig = mne.viz.plot_events(events, event_id=event_dict, sfreq=raw_haemo.info["sfreq"])





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_006.png
   :alt: plot 99 bad
   :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 153-156

Next we define the range of our epochs, the rejection criteria,
baseline correction, and extract the epochs. We visualise the log of which
epochs were dropped.

.. GENERATED FROM PYTHON SOURCE LINES 156-176

.. code-block:: Python


    reject_criteria = dict(hbo=10e-6)
    tmin, tmax = -1.5, 10.5

    epochs = mne.Epochs(
        raw_haemo,
        events,
        event_id=event_dict,
        tmin=tmin,
        tmax=tmax,
        reject=reject_criteria,
        reject_by_annotation=True,
        proj=True,
        baseline=(None, 0),
        preload=True,
        detrend=1,
        verbose=True,
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Not setting metadata
    90 matching events found
    Setting baseline interval to [-1.536, 0.0] s
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 90 events and 95 original time points ...
    0 bad epochs dropped




.. GENERATED FROM PYTHON SOURCE LINES 177-183

Plot standard fNIRS response image
----------------------------------

Next we generate the most common visualisation of fNIRS data: plotting
both the HbO and HbR on the same figure to illustrate the relation between
the two signals.

.. GENERATED FROM PYTHON SOURCE LINES 183-198

.. code-block:: Python


    evoked_dict = {
        "Tapping/HbO": epochs["Tapping"].average(picks="hbo"),
        "Tapping/HbR": epochs["Tapping"].average(picks="hbr"),
    }

    # Rename channels until the encoding of frequency in ch_name is fixed
    for condition in evoked_dict:
        evoked_dict[condition].rename_channels(lambda x: x[:-4])

    color_dict = dict(HbO="#AA3377", HbR="b")

    mne.viz.plot_compare_evokeds(evoked_dict, combine="mean", ci=0.95, colors=color_dict)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_007.png
   :alt: plot 99 bad
   :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<Figure size 800x600 with 1 Axes>]



.. GENERATED FROM PYTHON SOURCE LINES 199-232

Summary
--------------

Above is a waveform that has many of the characteristics that are expected
from a haeomodynamic response.
We see a baseline that is around zero, the oxyhaemoglobin is positive
and the deoxyhaemoglobin is negative,
the peak occurs around 5 seconds then returns to
baseline.
However, it was generated from random noise!

.. sidebar:: PLEASE READ THIS PAPER!!

   Huppert TJ. Commentary on the statistical properties of noise and its
   implication on general linear models in functional near-infrared
   spectroscopy. Neurophotonics. 2016;3(1)

As this is an introduction tutorial I do not go in to details about the
signal process theory behind why the settings above are wrong.
But if you are interested you should start with a DSP textbook
on signals and systems.

There are many signal processing parameter choices that interact to produce
your end result. It is important to have a control condition to ensure
that you aren't forcing your data to have these fake responses.
Its also important to understand the effect that each parameter choice
has on your output. Using a receiver operating characteristic is a good
approach to understand your analysis.
This also highlights some of the concerns with the time domain analysis
approach, and the benefits of the GLM style of analysis
:ref:`(see MNE-NIRS fNIRS GLM tutorial) <tut-fnirs-hrf>` (and Huppert 2016).

.. warning:: DO NOT USE THIS SCRIPT TO PROCESS YOUR DATA


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.900 seconds)

**Estimated memory usage:**  452 MB


.. _sphx_glr_download_auto_examples_general_plot_99_bad.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mne-tools/mne-nirs/gh-pages?filepath=stable/notebooks/auto_examples/general/plot_99_bad.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_99_bad.ipynb <plot_99_bad.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_99_bad.py <plot_99_bad.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_99_bad.zip <plot_99_bad.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
