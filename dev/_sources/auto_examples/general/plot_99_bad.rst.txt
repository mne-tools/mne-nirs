
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/general/plot_99_bad.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_general_plot_99_bad.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_general_plot_99_bad.py:


.. _tut-fnirs-processing-bad:

Importance of Controls and Parameter Selection
==============================================

.. warning:: DO NOT USE THIS SCRIPT TO PROCESS YOUR DATA

.. sidebar:: Relevant literature

   Huppert TJ. Commentary on the statistical properties of noise and its
   implication on general linear models in functional near-infrared
   spectroscopy. Neurophotonics. 2016;3(1)

This tutorial demonstrates how **NOT** to process your
functional near-infrared spectroscopy (fNIRS)
data.
Here I demonstrate that with a simple process pipelines even random noise
can look like a canonical haemodynamic response.

This tutorial was written to motivate further interest in to what affect
signal processing has on our data. And to provide a concrete example
about why you should understand your analysis and not vary parameters to meet
preconceived ideas of what your data should look like.
I recommend specifying analysis parameters in advance along with your experimental
protocol. Hopefully this tutorial also highlights the importance of
including a control condition in your experimental design.

The
:ref:`MNE fNIRS waveform tutorial <mne:tut-fnirs-processing>`
is used as a basis for this analysis, so most of the document looks similar.
However, at the midpoint we replace the real data with noise and demonstrate
that without careful attention to the analysis parameter it would still
appear as if a fNIRS response is observed.


.. contents:: Page contents
   :local:
   :depth: 2

.. GENERATED FROM PYTHON SOURCE LINES 42-62

.. code-block:: Python

    # sphinx_gallery_thumbnail_number = 7


    # Authors: Robert Luke <mail@robertluke.net>
    #
    # License: BSD (3-clause)

    import os
    import numpy as np

    import mne
    import mne_nirs
    np.random.seed(1)

    fnirs_data_folder = mne.datasets.fnirs_motor.data_path()
    fnirs_cw_amplitude_dir = os.path.join(fnirs_data_folder, 'Participant-1')
    raw_intensity = mne.io.read_raw_nirx(fnirs_cw_amplitude_dir, verbose=True)
    raw_intensity.load_data()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading /home/circleci/mne_data/MNE-fNIRS-motor-data/Participant-1


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <details open>
        <summary><strong>General</strong></summary>
        <table class="table table-hover table-striped table-sm table-responsive small">
            <tr>
                <th>Measurement date</th>
            
                <td>November 02, 2019  13:16:16 GMT</td>
            
            </tr>
            <tr>
                <th>Experimenter</th>
            
                <td>Unknown</td>
            
            </tr>
            <tr>
                <th>Participant</th>
            
            
                <td>P1</td>
            
            
            </tr>
        </table>
        </details>
        <details open>
            <summary><strong>Channels</strong></summary>
            <table class="table table-hover table-striped table-sm table-responsive small">
                <tr>
                    <th>Digitized points</th>
                
                    <td>31 points</td>
                
                </tr>
                <tr>
                    <th>Good channels</th>
                    <td>56 fNIRS (CW amplitude)</td>
                </tr>
                <tr>
                    <th>Bad channels</th>
                    <td>None</td>
                </tr>
                <tr>
                    <th>EOG channels</th>
                    <td>Not available</td>
                </tr>
                <tr>
                    <th>ECG channels</th>
                    <td>Not available</td>
                </tr>
            </table>
            </details>
            <details open>
                <summary><strong>Data</strong></summary>
                <table class="table table-hover table-striped table-sm table-responsive small">
                
                    <tr>
                        <th>Sampling frequency</th>
                        <td>7.81 Hz</td>
                    </tr>
                
                
                    <tr>
                        <th>Highpass</th>
                        <td>0.00 Hz</td>
                    </tr>
                
                
                    <tr>
                        <th>Lowpass</th>
                        <td>3.91 Hz</td>
                    </tr>
                
                
                
                    <tr>
                        <th>Filenames</th>
                        <td>Participant-1</td>
                    </tr>
                
                
                    <tr>
                        <th>Duration</th>
                        <td>00:49:35 (HH:MM:SS)</td>
                    </tr>
                
                </table>
                </details>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 63-70

Selecting channels appropriate for detecting neural responses
-------------------------------------------------------------

First we remove channels that are too close together (short channels) to
detect a neural response (less than 1 cm distance between optodes).
These short channels can be seen in the figure above.
To achieve this we pick all the channels that are not considered to be short.

.. GENERATED FROM PYTHON SOURCE LINES 70-79

.. code-block:: Python


    picks = mne.pick_types(raw_intensity.info, meg=False, fnirs=True)
    dists = mne.preprocessing.nirs.source_detector_distances(
        raw_intensity.info, picks=picks)
    raw_intensity.pick(picks[dists > 0.01])
    raw_intensity.plot(n_channels=len(raw_intensity.ch_names),
                       duration=500, show_scrollbars=False)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_001.png
   :alt: Raw plot
   :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <mne_qt_browser._pg_figure.MNEQtBrowser(0x0) at 0x7ff1678ab8c0>



.. GENERATED FROM PYTHON SOURCE LINES 80-84

Converting from raw intensity to optical density
------------------------------------------------

The raw intensity values are then converted to optical density.

.. GENERATED FROM PYTHON SOURCE LINES 84-90

.. code-block:: Python


    raw_od = mne.preprocessing.nirs.optical_density(raw_intensity)
    raw_od.plot(n_channels=len(raw_od.ch_names),
                duration=500, show_scrollbars=False)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_002.png
   :alt: Raw plot
   :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <mne_qt_browser._pg_figure.MNEQtBrowser(0x0) at 0x7ff274242b40>



.. GENERATED FROM PYTHON SOURCE LINES 91-96

Converting from optical density to haemoglobin
----------------------------------------------

Next we convert the optical density data to haemoglobin concentration using
the modified Beer-Lambert law.

.. GENERATED FROM PYTHON SOURCE LINES 96-103

.. code-block:: Python


    raw_haemo = mne.preprocessing.nirs.beer_lambert_law(raw_od, ppf=0.1)
    raw_haemo.plot(n_channels=len(raw_haemo.ch_names),
                   duration=500, show_scrollbars=False)






.. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_003.png
   :alt: Raw plot
   :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <mne_qt_browser._pg_figure.MNEQtBrowser(0x0) at 0x7ff274211480>



.. GENERATED FROM PYTHON SOURCE LINES 104-109

!!!!!!Replace real data with white noise!!!!!
----------------------------------------------

Here we replace the signals with white noise.
We make the HbR white noise 3 time smaller than HbO as is commonly observed.

.. GENERATED FROM PYTHON SOURCE LINES 109-115

.. code-block:: Python



    raw_haemo._data = np.random.randn(40, 23239) / 1.0e6 * 1
    raw_haemo._data[::2, :]= np.random.randn(20, 23239) / 1.0e6 * 3









.. GENERATED FROM PYTHON SOURCE LINES 116-122

Removing heart rate from signal (BAD DONT COPY)
-----------------------------------------------

This analysis is BAD and is provided just as a demonstration.
Do not do this!!


.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    fig = raw_haemo.plot_psd(average=True)
    fig.suptitle('Before filtering', weight='bold', size='x-large')
    raw_haemo = raw_haemo.filter(0.05, 0.1, h_trans_bandwidth=0.2,
                                 l_trans_bandwidth=0.02)
    fig = raw_haemo.plot_psd(average=True)
    fig.suptitle('After filtering', weight='bold', size='x-large')





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_004.png
         :alt: Before filtering, Oxyhemoglobin, Deoxyhemoglobin
         :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_005.png
         :alt: After filtering, Oxyhemoglobin, Deoxyhemoglobin
         :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_005.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 0.993055, 'After filtering')



.. GENERATED FROM PYTHON SOURCE LINES 132-136

Apply Cui negative correlation method
-------------------------------------

Here we apply the Cui signal enhancement technique.

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: Python


    raw_haemo = mne_nirs.signal_enhancement.enhance_negative_correlation(raw_haemo)









.. GENERATED FROM PYTHON SOURCE LINES 141-150

Extract epochs
--------------

Now that the signal has been converted to relative haemoglobin concentration,
and the unwanted heart rate component has been removed, we can extract epochs
related to each of the experimental conditions.

First we extract the events of interest and visualise them to ensure they are
correct.

.. GENERATED FROM PYTHON SOURCE LINES 150-159

.. code-block:: Python


    events, _ = mne.events_from_annotations(raw_haemo, event_id={'1.0': 1,
                                                                 '2.0': 2,
                                                                 '3.0': 3})
    event_dict = {'Control': 1, 'Tapping/Left': 2, 'Tapping/Right': 3}
    fig = mne.viz.plot_events(events, event_id=event_dict,
                              sfreq=raw_haemo.info['sfreq'])





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_006.png
   :alt: plot 99 bad
   :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 160-163

Next we define the range of our epochs, the rejection criteria,
baseline correction, and extract the epochs. We visualise the log of which
epochs were dropped.

.. GENERATED FROM PYTHON SOURCE LINES 163-174

.. code-block:: Python


    reject_criteria = dict(hbo=10e-6)
    tmin, tmax = -1.5, 10.5

    epochs = mne.Epochs(raw_haemo, events, event_id=event_dict,
                        tmin=tmin, tmax=tmax,
                        reject=reject_criteria, reject_by_annotation=True,
                        proj=True, baseline=(None, 0), preload=True,
                        detrend=1, verbose=True)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Not setting metadata
    90 matching events found
    Setting baseline interval to [-1.536, 0.0] s
    Applying baseline correction (mode: mean)
    0 projection items activated
    Using data from preloaded Raw for 90 events and 95 original time points ...
    0 bad epochs dropped




.. GENERATED FROM PYTHON SOURCE LINES 175-181

Plot standard fNIRS response image
----------------------------------

Next we generate the most common visualisation of fNIRS data: plotting
both the HbO and HbR on the same figure to illustrate the relation between
the two signals.

.. GENERATED FROM PYTHON SOURCE LINES 181-195

.. code-block:: Python


    evoked_dict = {'Tapping/HbO': epochs['Tapping'].average(picks='hbo'),
                   'Tapping/HbR': epochs['Tapping'].average(picks='hbr')}

    # Rename channels until the encoding of frequency in ch_name is fixed
    for condition in evoked_dict:
        evoked_dict[condition].rename_channels(lambda x: x[:-4])

    color_dict = dict(HbO='#AA3377', HbR='b')

    mne.viz.plot_compare_evokeds(evoked_dict, combine="mean", ci=0.95,
                                 colors=color_dict)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_99_bad_007.png
   :alt: plot 99 bad
   :srcset: /auto_examples/general/images/sphx_glr_plot_99_bad_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<Figure size 800x600 with 1 Axes>]



.. GENERATED FROM PYTHON SOURCE LINES 196-229

Summary
--------------

Above is a waveform that has many of the characteristics that are expected
from a haeomodynamic response.
We see a baseline that is around zero, the oxyhaemoglobin is positive
and the deoxyhaemoglobin is negative,
the peak occurs around 5 seconds then returns to
baseline.
However, it was generated from random noise!

.. sidebar:: PLEASE READ THIS PAPER!!

   Huppert TJ. Commentary on the statistical properties of noise and its
   implication on general linear models in functional near-infrared
   spectroscopy. Neurophotonics. 2016;3(1)

As this is an introduction tutorial I do not go in to details about the
signal process theory behind why the settings above are wrong.
But if you are interested you should start with a DSP textbook
on signals and systems.

There are many signal processing parameter choices that interact to produce
your end result. It is important to have a control condition to ensure
that you aren't forcing your data to have these fake responses.
Its also important to understand the effect that each parameter choice
has on your output. Using a receiver operating characteristic is a good
approach to understand your analysis.
This also highlights some of the concerns with the time domain analysis
approach, and the benefits of the GLM style of analysis
:ref:`(see MNE-NIRS fNIRS GLM tutorial) <tut-fnirs-hrf>` (and Huppert 2016).

.. warning:: DO NOT USE THIS SCRIPT TO PROCESS YOUR DATA


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.060 seconds)

**Estimated memory usage:**  10 MB


.. _sphx_glr_download_auto_examples_general_plot_99_bad.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mne-tools/mne-nirs/gh-pages?filepath=stable/notebooks/auto_examples/general/plot_99_bad.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_99_bad.ipynb <plot_99_bad.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_99_bad.py <plot_99_bad.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
