# Tagging a commit with [circle front] will build the front page and perform test-doc.
# Tagging a commit with [circle full] will build everything.
version: 2
jobs:
    build_docs:
      docker:
        - image: circleci/python:3.8.1-buster
      steps:
        - checkout
        - run:
            name: Set BASH_ENV
            command: |
              set -e
              echo "set -e" >> $BASH_ENV
              echo "export DISPLAY=:99" >> $BASH_ENV
              echo "export OPENBLAS_NUM_THREADS=4" >> $BASH_ENV
              echo "export XDG_RUNTIME_DIR=/tmp/runtime-circleci"  >> $BASH_ENV
              source tools/get_minimal_commands.sh
              echo "source ${PWD}/tools/get_minimal_commands.sh" >> $BASH_ENV
              echo "export MNE_3D_BACKEND=pyvista" >> $BASH_ENV
              echo "export PATH=~/.local/bin/:${MNE_ROOT}/bin:$PATH" >> $BASH_ENV
              echo "BASH_ENV:"
              cat $BASH_ENV

        - run:
            name: Install 3D rendering libraries \ PyQt5 dependencies \ graphviz \ optipng (for optimized images)
            command: |
              sudo apt-get install libosmesa6 libglx-mesa0 libopengl0 libglx0 libdbus-1-3 \
                  libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-xfixes0 libxcb-xinerama0 \
                  graphviz \
                  optipng

        - run:
            name: Spin up Xvfb
            command: |
              /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1400x900x24 -ac +extension GLX +render -noreset;

        - run:
            name: Install fonts needed for diagrams
            command: |
              mkdir -p $HOME/.fonts
              curl https://codeload.github.com/adobe-fonts/source-code-pro/tar.gz/2.030R-ro/1.050R-it | tar xz -C $HOME/.fonts
              curl https://codeload.github.com/adobe-fonts/source-sans-pro/tar.gz/3.006R | tar xz -C $HOME/.fonts
              fc-cache -f

        - run:
            name: Get Python running
            command: |
              python -m pip install --user --upgrade --progress-bar off pip setuptools
              python -m pip install --user --upgrade --progress-bar off --pre sphinx
              python -m pip install --user --upgrade --progress-bar off https://codeload.github.com/larsoner/sphinx-bootstrap-divs/zip/master
              python -m pip install --user --upgrade --progress-bar off https://codeload.github.com/mne-tools/mne-python/zip/master
              python -m pip install --user --upgrade --progress-bar off https://github.com/nilearn/nilearn/archive/master.zip
              python -m pip install --user --upgrade --progress-bar off -r requirements.txt -r requirements_testing.txt -r requirements_doc.txt
              python -m pip uninstall -yq pysurfer mayavi
              python -m pip install --user -e .
              
        - run:
            name: Check PyQt5
            command: LD_DEBUG=libs python -c "from PyQt5.QtWidgets import QApplication, QWidget; app = QApplication([])"
            
        - save_cache:
            key: pip-cache
            paths:
              - ~/.cache/pip

        # Look at what we have and fail early if there is some library conflict
        - run:
            name: Check installation
            command: |
               which python
               QT_DEBUG_PLUGINS=1 mne sys_info
               python -c "import numpy; numpy.show_config()"
               LIBGL_DEBUG=verbose python -c "import pyvistaqt; pyvistaqt.BackgroundPlotter(show=True)"
               python -c "import mne; mne.set_config('MNE_USE_CUDA', 'false')"  # this is needed for the config tutorial
               python -c "import mne; mne.set_config('MNE_LOGGING_LEVEL', 'info')"
               python -c "import mne; level = mne.get_config('MNE_LOGGING_LEVEL'); assert level.lower() == 'info', repr(level)"

        # Build docs
        - run:
            name: make html
            command: |
              cd doc;
              make html;


        # Save the outputs
        - store_artifacts:
            path: doc/_build/html/
            destination: dev

workflows:
  version: 2

  default:
    jobs:
      - build_docs
