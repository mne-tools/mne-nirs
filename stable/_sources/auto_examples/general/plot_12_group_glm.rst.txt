
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/general/plot_12_group_glm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_general_plot_12_group_glm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_general_plot_12_group_glm.py:


.. _tut-fnirs-group:

Group Level GLM Analysis
========================

This is an example of a group level GLM based
functional near-infrared spectroscopy (fNIRS)
analysis in MNE-NIRS.

.. sidebar:: Relevant literature

   Luke, Robert, et al.
   "Analysis methods for measuring passive auditory fNIRS responses generated
   by a block-design paradigm." Neurophotonics 8.2 (2021):
   `025008 <https://www.spiedigitallibrary.org/journals/neurophotonics/volume-8/issue-2/025008/Analysis-methods-for-measuring-passive-auditory-fNIRS-responses-generated-by/10.1117/1.NPh.8.2.025008.short>`_.

   Santosa, H., Zhai, X., Fishburn, F., & Huppert, T. (2018).
   The NIRS brain AnalyzIR toolbox. Algorithms, 11(5), 73.

   Gorgolewski, Krzysztof J., et al.
   "The brain imaging data structure, a format for organizing and describing
   outputs of neuroimaging experiments." Scientific data 3.1 (2016): 1-9.

Individual level analysis of this data is described in the
:ref:`MNE fNIRS waveform tutorial <mne:tut-fnirs-processing>`
and the
:ref:`MNE-NIRS fNIRS GLM tutorial <tut-fnirs-hrf>`
So this example will skim over the individual level details
and focus on the group level aspect of analysis.
Here we describe how to process multiple measurements
and summarise  group level effects both as summary statistics and visually.

The data used in this example is available
`at this location <https://github.com/rob-luke/BIDS-NIRS-Tapping>`_.
It is a finger tapping example and is briefly described below.
The dataset contains 5 participants.
The example dataset is in
`BIDS <https://bids.neuroimaging.io>`_
format and therefore already contains
information about triggers, condition names, etc.

.. note::

   This tutorial uses data in the BIDS format.
   The BIDS specification for NIRS data is still under development. See:
   `fNIRS BIDS proposal <https://github.com/bids-standard/bids-specification/pull/802>`_.
   As such, to run this tutorial you must use the MNE-BIDS 0.10 or later.

   MNE-Python allows you to process fNIRS data that is not in BIDS format too.
   Simply modify the ``read_raw_`` function to match your data type.
   See :ref:`data importing tutorial <tut-importing-fnirs-data>` to learn how
   to use your data with MNE-Python.

.. note::

   Optodes were placed over the motor cortex using the standard NIRX motor
   montage, but with 8 short channels added (see their web page for details).
   To view the sensor locations run
   `raw_intensity.plot_sensors()`.
   A sound was presented to indicate which hand the participant should tap.
   Participants tapped their thumb to their fingers for 5s.
   Conditions were presented in a random order with a randomised inter
   stimulus interval.

.. contents:: Page contents
   :local:
   :depth: 2

.. GENERATED FROM PYTHON SOURCE LINES 70-107

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 2

    # Authors: Robert Luke <mail@robertluke.net>
    #
    # License: BSD (3-clause)


    # Import common libraries
    import numpy as np
    import pandas as pd

    # Import MNE processing
    from mne.preprocessing.nirs import optical_density, beer_lambert_law

    # Import MNE-NIRS processing
    from mne_nirs.statistics import run_glm
    from mne_nirs.experimental_design import make_first_level_design_matrix
    from mne_nirs.statistics import statsmodels_to_results
    from mne_nirs.channels import get_short_channels, get_long_channels
    from mne_nirs.channels import picks_pair_to_idx
    from mne_nirs.visualisation import plot_glm_group_topo
    from mne_nirs.datasets import fnirs_motor_group
    from mne_nirs.visualisation import plot_glm_surface_projection
    from mne_nirs.io.fold import fold_channel_specificity

    # Import MNE-BIDS processing
    from mne_bids import BIDSPath, read_raw_bids, get_entity_vals

    # Import StatsModels
    import statsmodels.formula.api as smf

    # Import Plotting Library
    import matplotlib.pyplot as plt
    import matplotlib as mpl
    import seaborn as sns









.. GENERATED FROM PYTHON SOURCE LINES 108-122

Set up directories
------------------
.. sidebar:: Requires MNE-BIDS fNIRS branch

   This section of code requires the MNE-BIDS fNIRS branch.
   See instructions at the top of the page on how to install.
   Alternatively, if your data is not in BIDS format,
   skip to the next section.

First we will define where the raw data is stored. We will analyse a
BIDS dataset. This ensures we have all the metadata we require
without manually specifying the trigger names etc.
We first define where the root directory of our dataset is.
In this example we use the example dataset ``fnirs_motor_group``.

.. GENERATED FROM PYTHON SOURCE LINES 122-127

.. code-block:: default


    root = fnirs_motor_group.data_path()
    print(root)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/circleci/mne_data/fNIRS-motor-group




.. GENERATED FROM PYTHON SOURCE LINES 128-132

And as we are using MNE-BIDS we can create a BIDSPath object.
This class helps to handle all the path wrangling.
We inform the software that we are analysing nirs data that is saved in
the snirf format.

.. GENERATED FROM PYTHON SOURCE LINES 132-138

.. code-block:: default


    dataset = BIDSPath(root=root, task="tapping",
                       datatype="nirs", suffix="nirs", extension=".snirf")

    print(dataset.directory)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/circleci/mne_data/fNIRS-motor-group/nirs




.. GENERATED FROM PYTHON SOURCE LINES 139-140

For example we can automatically query the subjects, tasks, and sessions.

.. GENERATED FROM PYTHON SOURCE LINES 140-145

.. code-block:: default


    subjects = get_entity_vals(root, 'subject')
    print(subjects)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['01', '02', '03', '04', '05']




.. GENERATED FROM PYTHON SOURCE LINES 146-179

Define individual analysis
--------------------------

.. sidebar:: Individual analysis procedures

   :ref:`Waveform individual analysis <tut-fnirs-processing>`

   :ref:`GLM individual analysis <tut-fnirs-hrf>`

First we define the analysis that will be applied to each file.
This is a GLM analysis as described in the
:ref:`individual GLM tutorial <tut-fnirs-hrf>`,
so this example will skim over the individual level details.

The analysis extracts a response estimate for each channel,
each region of interest, and computes a contrast between left and right
finger tapping.
We return the raw object and data frames for the computed results.
Information about channels, triggers and their meanings are stored in the
BIDS structure and are automatically obtained when importing the data.

Here we also resample to a 0.3 Hz sample rate just to speed up the example
and use less memory, resampling to 0.6 Hz is a better choice for full
analyses.

.. note::

   The nilearn library does not allow backslash characters in the condition
   name. So we must replace the backslash with an underscore to ensure the
   GLM computation is successful. Hopefully future versions of MNE-NIRS will
   automatically handle these characters, see https://github.com/mne-tools/mne-nirs/issues/420
   for more information. In the meantime use the following code to replace the
   illegal characters.

.. GENERATED FROM PYTHON SOURCE LINES 179-247

.. code-block:: default



    def individual_analysis(bids_path, ID):

        raw_intensity = read_raw_bids(bids_path=bids_path, verbose=False)
        # Delete annotation labeled 15, as these just signify the start and end of experiment.
        raw_intensity.annotations.delete(raw_intensity.annotations.description == '15.0')
        # sanitize event names
        raw_intensity.annotations.description[:] = [
            d.replace('/', '_') for d in raw_intensity.annotations.description]

        # Convert signal to haemoglobin and resample
        raw_od = optical_density(raw_intensity)
        raw_haemo = beer_lambert_law(raw_od, ppf=0.1)
        raw_haemo.resample(0.3)

        # Cut out just the short channels for creating a GLM repressor
        sht_chans = get_short_channels(raw_haemo)
        raw_haemo = get_long_channels(raw_haemo)

        # Create a design matrix
        design_matrix = make_first_level_design_matrix(raw_haemo, stim_dur=5.0)

        # Append short channels mean to design matrix
        design_matrix["ShortHbO"] = np.mean(sht_chans.copy().pick(picks="hbo").get_data(), axis=0)
        design_matrix["ShortHbR"] = np.mean(sht_chans.copy().pick(picks="hbr").get_data(), axis=0)

        # Run GLM
        glm_est = run_glm(raw_haemo, design_matrix)

        # Define channels in each region of interest
        # List the channel pairs manually
        left = [[4, 3], [1, 3], [3, 3], [1, 2], [2, 3], [1, 1]]
        right = [[8, 7], [5, 7], [7, 7], [5, 6], [6, 7], [5, 5]]
        # Then generate the correct indices for each pair
        groups = dict(
            Left_Hemisphere=picks_pair_to_idx(raw_haemo, left, on_missing='ignore'),
            Right_Hemisphere=picks_pair_to_idx(raw_haemo, right, on_missing='ignore'))

        # Extract channel metrics
        cha = glm_est.to_dataframe()

        # Compute region of interest results from channel data
        roi = glm_est.to_dataframe_region_of_interest(groups,
                                                      design_matrix.columns,
                                                      demographic_info=True)

        # Define left vs right tapping contrast
        contrast_matrix = np.eye(design_matrix.shape[1])
        basic_conts = dict([(column, contrast_matrix[i])
                            for i, column in enumerate(design_matrix.columns)])
        contrast_LvR = basic_conts['Tapping_Left'] - basic_conts['Tapping_Right']

        # Compute defined contrast
        contrast = glm_est.compute_contrast(contrast_LvR)
        con = contrast.to_dataframe()

        # Add the participant ID to the dataframes
        roi["ID"] = cha["ID"] = con["ID"] = ID

        # Convert to uM for nicer plotting below.
        cha["theta"] = [t * 1.e6 for t in cha["theta"]]
        roi["theta"] = [t * 1.e6 for t in roi["theta"]]
        con["effect"] = [t * 1.e6 for t in con["effect"]]

        return raw_haemo, roi, cha, con









.. GENERATED FROM PYTHON SOURCE LINES 248-255

Run analysis on all participants
--------------------------------

Next we loop through the five measurements and run the individual analysis
on each. We append the individual results in to a large dataframe that
will contain the results from all measurements. We create a group dataframe
for the region of interest, channel level, and contrast results.

.. GENERATED FROM PYTHON SOURCE LINES 255-274

.. code-block:: default


    df_roi = pd.DataFrame()  # To store region of interest results
    df_cha = pd.DataFrame()  # To store channel level results
    df_con = pd.DataFrame()  # To store channel level contrast results

    for sub in subjects:  # Loop from first to fifth subject

        # Create path to file based on experiment info
        bids_path = dataset.update(subject=sub)

        # Analyse data and return both ROI and channel results
        raw_haemo, roi, channel, con = individual_analysis(bids_path, sub)

        # Append individual results to all participants
        df_roi = pd.concat([df_roi, roi], ignore_index=True)
        df_cha = pd.concat([df_cha, channel], ignore_index=True)
        df_con = pd.concat([df_con, con], ignore_index=True)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Reading 0 ... 23238  =      0.000 ...  2974.464 secs...
    Reading 0 ... 18877  =      0.000 ...  2416.256 secs...
    Reading 0 ... 18874  =      0.000 ...  2415.872 secs...
    Reading 0 ... 23120  =      0.000 ...  2959.360 secs...
    Reading 0 ... 23006  =      0.000 ...  2944.768 secs...




.. GENERATED FROM PYTHON SOURCE LINES 275-284

Visualise Individual results
----------------------------

First we visualise the results from each individual to ensure the
data values look reasonable.
Here we see that we have data from five participants, we plot just the HbO
values and observe they are in the expect range.
We can already see that the control condition is always near zero,
and that the responses look to be contralateral to the tapping hand.

.. GENERATED FROM PYTHON SOURCE LINES 284-291

.. code-block:: default


    grp_results = df_roi.query("Condition in ['Control', 'Tapping_Left', 'Tapping_Right']")
    grp_results = grp_results.query("Chroma in ['hbo']")

    sns.catplot(x="Condition", y="theta", col="ID", hue="ROI", data=grp_results, col_wrap=5, ci=None, palette="muted", height=4, s=10)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_12_group_glm_001.png
   :alt: ID = 01, ID = 02, ID = 03, ID = 04, ID = 05
   :srcset: /auto_examples/general/images/sphx_glr_plot_12_group_glm_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <seaborn.axisgrid.FacetGrid object at 0x7f10ac6f55e0>



.. GENERATED FROM PYTHON SOURCE LINES 292-323

Compute group level results
---------------------------

.. sidebar:: Relevant literature

   For an introduction to mixed effects analysis see:
   Winter, Bodo. "A very basic tutorial for performing linear mixed effects
   analyses." arXiv preprint arXiv:1308.5499 (2013).

   For a summary of linear mixed models in python
   and the relation to lmer see:
   :ref:`statsmodels docs <statsmodels:mixedlmmod>`

   For a summary of these models in the context of fNIRS see section 3.5 of:
   Santosa, H., Zhai, X., Fishburn, F., & Huppert, T. (2018).
   The NIRS brain AnalyzIR toolbox. Algorithms, 11(5), 73.

Next we use a linear mixed effects model to examine the
relation between conditions and our response estimate (theta).
Combinations of 3 fixed effects will be evaluated, ROI (left vs right),
condition (control, tapping/left, tapping/right), and chromophore (HbO, HbR).
With a random effect of subject.
Alternatively, you could export the group dataframe (`df_roi.to_csv()`) and
analyse in your favorite stats program.

We do not explore the modeling procedure in depth here as topics
such model selection and examining residuals are beyond the scope of
this example (see relevant literature).
Alternatively, we could use a robust linear
model by using the code
`roi_model = rlm('theta ~ -1 + ROI:Condition:Chroma', grp_results).fit()`.

.. GENERATED FROM PYTHON SOURCE LINES 323-331

.. code-block:: default


    grp_results = df_roi.query("Condition in ['Control','Tapping_Left', 'Tapping_Right']")

    roi_model = smf.mixedlm("theta ~ -1 + ROI:Condition:Chroma",
                            grp_results, groups=grp_results["ID"]).fit(method='nm')
    roi_model.summary()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/circleci/python_env/lib/python3.8/site-packages/statsmodels/regression/mixed_linear_model.py:2237: ConvergenceWarning: The MLE may be on the boundary of the parameter space.
      warnings.warn(msg, ConvergenceWarning)


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table class="simpletable">
    <tr>
           <td>Model:</td>       <td>MixedLM</td> <td>Dependent Variable:</td>   <td>theta</td>  
    </tr>
    <tr>
      <td>No. Observations:</td>   <td>60</td>          <td>Method:</td>         <td>REML</td>   
    </tr>
    <tr>
         <td>No. Groups:</td>       <td>5</td>          <td>Scale:</td>         <td>10.1637</td> 
    </tr>
    <tr>
      <td>Min. group size:</td>    <td>12</td>      <td>Log-Likelihood:</td>   <td>-133.4174</td>
    </tr>
    <tr>
      <td>Max. group size:</td>    <td>12</td>        <td>Converged:</td>         <td>Yes</td>   
    </tr>
    <tr>
      <td>Mean group size:</td>   <td>12.0</td>            <td></td>               <td></td>     
    </tr>
    </table>
    <table class="simpletable">
    <tr>
                                   <td></td>                               <th>Coef.</th> <th>Std.Err.</th>    <th>z</th>   <th>P>|z|</th> <th>[0.025</th> <th>0.975]</th>
    </tr>
    <tr>
      <th>ROI[Left_Hemisphere]:Condition[Control]:Chroma[hbo]</th>        <td>-0.320</td>   <td>1.426</td>  <td>-0.224</td> <td>0.823</td> <td>-3.114</td>  <td>2.475</td>
    </tr>
    <tr>
      <th>ROI[Right_Hemisphere]:Condition[Control]:Chroma[hbo]</th>       <td>-0.930</td>   <td>1.426</td>  <td>-0.652</td> <td>0.514</td> <td>-3.725</td>  <td>1.864</td>
    </tr>
    <tr>
      <th>ROI[Left_Hemisphere]:Condition[Tapping_Left]:Chroma[hbo]</th>    <td>2.506</td>   <td>1.426</td>   <td>1.758</td> <td>0.079</td> <td>-0.288</td>  <td>5.301</td>
    </tr>
    <tr>
      <th>ROI[Right_Hemisphere]:Condition[Tapping_Left]:Chroma[hbo]</th>   <td>9.576</td>   <td>1.426</td>   <td>6.717</td> <td>0.000</td>  <td>6.782</td> <td>12.370</td>
    </tr>
    <tr>
      <th>ROI[Left_Hemisphere]:Condition[Tapping_Right]:Chroma[hbo]</th>   <td>8.851</td>   <td>1.426</td>   <td>6.208</td> <td>0.000</td>  <td>6.057</td> <td>11.646</td>
    </tr>
    <tr>
      <th>ROI[Right_Hemisphere]:Condition[Tapping_Right]:Chroma[hbo]</th>  <td>3.862</td>   <td>1.426</td>   <td>2.709</td> <td>0.007</td>  <td>1.067</td>  <td>6.656</td>
    </tr>
    <tr>
      <th>ROI[Left_Hemisphere]:Condition[Control]:Chroma[hbr]</th>         <td>0.296</td>   <td>1.426</td>   <td>0.208</td> <td>0.836</td> <td>-2.499</td>  <td>3.090</td>
    </tr>
    <tr>
      <th>ROI[Right_Hemisphere]:Condition[Control]:Chroma[hbr]</th>        <td>0.159</td>   <td>1.426</td>   <td>0.112</td> <td>0.911</td> <td>-2.635</td>  <td>2.954</td>
    </tr>
    <tr>
      <th>ROI[Left_Hemisphere]:Condition[Tapping_Left]:Chroma[hbr]</th>   <td>-1.927</td>   <td>1.426</td>  <td>-1.352</td> <td>0.176</td> <td>-4.722</td>  <td>0.867</td>
    </tr>
    <tr>
      <th>ROI[Right_Hemisphere]:Condition[Tapping_Left]:Chroma[hbr]</th>  <td>-3.756</td>   <td>1.426</td>  <td>-2.634</td> <td>0.008</td> <td>-6.550</td> <td>-0.961</td>
    </tr>
    <tr>
      <th>ROI[Left_Hemisphere]:Condition[Tapping_Right]:Chroma[hbr]</th>  <td>-3.755</td>   <td>1.426</td>  <td>-2.634</td> <td>0.008</td> <td>-6.549</td> <td>-0.960</td>
    </tr>
    <tr>
      <th>ROI[Right_Hemisphere]:Condition[Tapping_Right]:Chroma[hbr]</th> <td>-1.692</td>   <td>1.426</td>  <td>-1.187</td> <td>0.235</td> <td>-4.486</td>  <td>1.102</td>
    </tr>
    <tr>
      <th>Group Var</th>                                                   <td>0.000</td>   <td>0.226</td>     <td></td>      <td></td>       <td></td>       <td></td>   
    </tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 332-353

Second level analysis with covariates
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. sidebar:: Relevant literature

   For a detailed discussion about covariates in fNIRS analysis see
   the seminar by Dr. Jessica Gemignani
   (`youtube <https://www.youtube.com/watch?feature=emb_logo&v=3E28sT1JI14>`_).

It is simple to extend these models to include covariates.
This dataset is small, so including additional factors may not be
appropriate. However, for instructional purpose, we will include a
covariate of gender. There are 3 females and 2 males in this dataset.
Also, for instructional purpose, we modify the model
above to only explore the difference between the two tapping conditions in
the hbo signal in the right hemisphere.

From the model result we observe that hbo responses in the right hemisphere
are smaller when the right hand was used (as expected for these
contralaterally dominant responses) and there is no significant
effect of gender.

.. GENERATED FROM PYTHON SOURCE LINES 353-362

.. code-block:: default


    grp_results = df_roi.query("Condition in ['Tapping_Left', 'Tapping_Right']")
    grp_results = grp_results.query("Chroma in ['hbo']")
    grp_results = grp_results.query("ROI in ['Right_Hemisphere']")

    roi_model = smf.mixedlm("theta ~ Condition + Sex",
                            grp_results, groups=grp_results["ID"]).fit(method='nm')
    roi_model.summary()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table class="simpletable">
    <tr>
           <td>Model:</td>       <td>MixedLM</td> <td>Dependent Variable:</td>   <td>theta</td> 
    </tr>
    <tr>
      <td>No. Observations:</td>   <td>10</td>          <td>Method:</td>         <td>REML</td>  
    </tr>
    <tr>
         <td>No. Groups:</td>       <td>5</td>          <td>Scale:</td>         <td>5.8912</td> 
    </tr>
    <tr>
      <td>Min. group size:</td>     <td>2</td>      <td>Log-Likelihood:</td>   <td>-20.8959</td>
    </tr>
    <tr>
      <td>Max. group size:</td>     <td>2</td>        <td>Converged:</td>         <td>Yes</td>  
    </tr>
    <tr>
      <td>Mean group size:</td>    <td>2.0</td>            <td></td>               <td></td>    
    </tr>
    </table>
    <table class="simpletable">
    <tr>
                   <td></td>               <th>Coef.</th> <th>Std.Err.</th>    <th>z</th>   <th>P>|z|</th> <th>[0.025</th> <th>0.975]</th>
    </tr>
    <tr>
      <th>Intercept</th>                   <td>7.496</td>   <td>2.562</td>   <td>2.926</td> <td>0.003</td>  <td>2.474</td> <td>12.518</td>
    </tr>
    <tr>
      <th>Condition[T.Tapping_Right]</th> <td>-5.714</td>   <td>1.535</td>  <td>-3.723</td> <td>0.000</td> <td>-8.723</td> <td>-2.706</td>
    </tr>
    <tr>
      <th>Sex[T.male]</th>                 <td>5.200</td>   <td>3.865</td>   <td>1.345</td> <td>0.179</td> <td>-2.376</td> <td>12.776</td>
    </tr>
    <tr>
      <th>Group Var</th>                  <td>14.982</td>   <td>7.978</td>     <td></td>      <td></td>       <td></td>       <td></td>   
    </tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 363-374

Visualise group results
-----------------------

Now we can summarise the output of the second level model.
This figure shows that the control condition has small responses that
are not significantly different to zero for both HbO
and HbR in both hemispheres.
Whereas clear significant responses are show for the two tapping conditions.
We also observe the the tapping response is
larger in the contralateral hemisphere.
Filled symbols represent HbO, unfilled symbols represent HbR.

.. GENERATED FROM PYTHON SOURCE LINES 374-385

.. code-block:: default


    # Regenerate the results from the original group model above
    grp_results = df_roi.query("Condition in ['Control','Tapping_Left', 'Tapping_Right']")
    roi_model = smf.mixedlm("theta ~ -1 + ROI:Condition:Chroma",
                            grp_results, groups=grp_results["ID"]).fit(method='nm')

    df = statsmodels_to_results(roi_model)

    sns.catplot(x="Condition", y="Coef.", hue="ROI", data=df.query("Chroma == 'hbo'"), ci=None, palette="muted", height=4, s=10)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_12_group_glm_002.png
   :alt: plot 12 group glm
   :srcset: /auto_examples/general/images/sphx_glr_plot_12_group_glm_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/circleci/python_env/lib/python3.8/site-packages/statsmodels/regression/mixed_linear_model.py:2237: ConvergenceWarning: The MLE may be on the boundary of the parameter space.
      warnings.warn(msg, ConvergenceWarning)

    <seaborn.axisgrid.FacetGrid object at 0x7f104df357c0>



.. GENERATED FROM PYTHON SOURCE LINES 386-395

Group topographic visualisation
-------------------------------

We can also view the topographic representation of the data
(rather than the ROI summary above).
Here we just plot the oxyhaemoglobin for the two tapping conditions.
First we compute the mixed effects model for each channel (rather
than region of interest as above).
Then we pass these results to the topomap function.

.. GENERATED FROM PYTHON SOURCE LINES 395-439

.. code-block:: default


    fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10, 10),
                             gridspec_kw=dict(width_ratios=[1, 1]))

    # Cut down the dataframe just to the conditions we are interested in
    ch_summary = df_cha.query("Condition in ['Tapping_Left', 'Tapping_Right']")
    ch_summary = ch_summary.query("Chroma in ['hbo']")

    # Run group level model and convert to dataframe
    ch_model = smf.mixedlm("theta ~ -1 + ch_name:Chroma:Condition",
                           ch_summary, groups=ch_summary["ID"]).fit(method='nm')
    ch_model_df = statsmodels_to_results(ch_model)

    # Plot the two conditions
    plot_glm_group_topo(raw_haemo.copy().pick(picks="hbo"),
                        ch_model_df.query("Condition in ['Tapping_Left']"),
                        colorbar=False, axes=axes[0, 0],
                        vlim=(0, 20), cmap=mpl.cm.Oranges)

    plot_glm_group_topo(raw_haemo.copy().pick(picks="hbo"),
                        ch_model_df.query("Condition in ['Tapping_Right']"),
                        colorbar=True, axes=axes[0, 1],
                        vlim=(0, 20), cmap=mpl.cm.Oranges)

    # Cut down the dataframe just to the conditions we are interested in
    ch_summary = df_cha.query("Condition in ['Tapping_Left', 'Tapping_Right']")
    ch_summary = ch_summary.query("Chroma in ['hbr']")

    # Run group level model and convert to dataframe
    ch_model = smf.mixedlm("theta ~ -1 + ch_name:Chroma:Condition",
                           ch_summary, groups=ch_summary["ID"]).fit(method='nm')
    ch_model_df = statsmodels_to_results(ch_model)

    # Plot the two conditions
    plot_glm_group_topo(raw_haemo.copy().pick(picks="hbr"),
                        ch_model_df.query("Condition in ['Tapping_Left']"),
                        colorbar=False, axes=axes[1, 0],
                        vlim=(-10, 0), cmap=mpl.cm.Blues_r)
    plot_glm_group_topo(raw_haemo.copy().pick(picks="hbr"),
                        ch_model_df.query("Condition in ['Tapping_Right']"),
                        colorbar=True, axes=axes[1, 1],
                        vlim=(-10, 0), cmap=mpl.cm.Blues_r)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_12_group_glm_003.png
   :alt: Tapping_Left, Tapping_Right, Tapping_Left, Tapping_Right
   :srcset: /auto_examples/general/images/sphx_glr_plot_12_group_glm_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <AxesSubplot: title={'center': 'Tapping_Right'}>



.. GENERATED FROM PYTHON SOURCE LINES 440-446

Contrasts
---------

Finally we can examine the difference between the left and right hand
tapping conditions by viewing the contrast results
in a topographic representation.

.. GENERATED FROM PYTHON SOURCE LINES 446-461

.. code-block:: default


    fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(6, 6))
    con_summary = df_con.query("Chroma in ['hbo']")

    # Run group level model and convert to dataframe
    con_model = smf.mixedlm("effect ~ -1 + ch_name:Chroma",
                            con_summary, groups=con_summary["ID"]).fit(method='nm')
    con_model_df = statsmodels_to_results(con_model,
                                          order=raw_haemo.copy().pick(
                                              picks="hbo").ch_names)

    plot_glm_group_topo(raw_haemo.copy().pick(picks="hbo"),
                        con_model_df, colorbar=True, axes=axes)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_12_group_glm_004.png
   :alt: Contrast
   :srcset: /auto_examples/general/images/sphx_glr_plot_12_group_glm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/circleci/python_env/lib/python3.8/site-packages/statsmodels/regression/mixed_linear_model.py:2237: ConvergenceWarning: The MLE may be on the boundary of the parameter space.
      warnings.warn(msg, ConvergenceWarning)

    <AxesSubplot: title={'center': 'Contrast'}>



.. GENERATED FROM PYTHON SOURCE LINES 462-465

Or we can view only the left hemisphere for the contrast.
And set all channels that dont have a significant response to zero.


.. GENERATED FROM PYTHON SOURCE LINES 466-471

.. code-block:: default


    plot_glm_group_topo(raw_haemo.copy().pick(picks="hbo").pick(picks=range(10)),
                        con_model_df, colorbar=True, threshold=True)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_12_group_glm_005.png
   :alt: Contrast
   :srcset: /auto_examples/general/images/sphx_glr_plot_12_group_glm_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Reducing GLM results to match MNE data

    <AxesSubplot: title={'center': 'Contrast'}>



.. GENERATED FROM PYTHON SOURCE LINES 472-486

Cortical Surface Projections
----------------------------

The topographic plots above can sometimes be difficult to interpret with
respect to the underlying cortical locations. It is also possible to present
the data by projecting the channel level GLM values to the nearest cortical
surface. This can make it easier to understand the spatial aspects of your
data. Note however, that this is not a complete forward model with photon
migration simulations.
In the figure below we project the group results from the two conditions
to the cortical surface, and also present the contrast results in the same
fashion.
As in the topo plots above you can see that the activity is predominately
contralateral to the side of finger tapping.

.. GENERATED FROM PYTHON SOURCE LINES 486-513

.. code-block:: default



    # Generate brain figure from data
    clim = dict(kind='value', pos_lims=(0, 8, 11))
    brain = plot_glm_surface_projection(raw_haemo.copy().pick("hbo"),
                                        con_model_df, clim=clim, view='dorsal',
                                        colorbar=True, size=(800, 700))
    brain.add_text(0.05, 0.95, "Left-Right", 'title', font_size=16, color='k')

    # Run model code as above
    clim = dict(kind='value', pos_lims=(0, 11.5, 17))
    for idx, cond in enumerate(['Tapping_Left', 'Tapping_Right']):

        # Run same model as explained in the sections above
        ch_summary = df_cha.query("Condition in [@cond]")
        ch_summary = ch_summary.query("Chroma in ['hbo']")
        ch_model = smf.mixedlm("theta ~ -1 + ch_name", ch_summary,
                               groups=ch_summary["ID"]).fit(method='nm')
        model_df = statsmodels_to_results(ch_model, order=raw_haemo.copy().pick("hbo").ch_names)

        # Generate brain figure from data
        brain = plot_glm_surface_projection(raw_haemo.copy().pick("hbo"),
                                            model_df, clim=clim, view='dorsal',
                                            colorbar=True, size=(800, 700))
        brain.add_text(0.05, 0.95, cond, 'title', font_size=16, color='k')





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_12_group_glm_006.png
   :alt: plot 12 group glm
   :srcset: /auto_examples/general/images/sphx_glr_plot_12_group_glm_006.png
   :class: sphx-glr-single-img

.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/general/images/sphx_glr_plot_12_group_glm_007.png
          :alt: plot 12 group glm
          :srcset: /auto_examples/general/images/sphx_glr_plot_12_group_glm_007.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/general/images/sphx_glr_plot_12_group_glm_008.png
          :alt: plot 12 group glm
          :srcset: /auto_examples/general/images/sphx_glr_plot_12_group_glm_008.png
          :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 514-519

Table of channel level results
------------------------------

Sometimes a reviewer wants a long table of results per channel.
This can be generated from the statistics dataframe.

.. GENERATED FROM PYTHON SOURCE LINES 519-537

.. code-block:: default


    ch_summary = df_cha.query("Condition in ['Tapping_Left', 'Tapping_Right']")
    ch_summary = ch_summary.query("Chroma in ['hbo']")

    # Run group level model and convert to dataframe
    ch_model = smf.mixedlm("theta ~ -1 + ch_name:Chroma:Condition",
                           ch_summary, groups=ch_summary["ID"]).fit(method='nm')

    # Here we can use the order argument to ensure the channel name order
    ch_model_df = statsmodels_to_results(ch_model,
                                         order=raw_haemo.copy().pick(
                                             picks="hbo").ch_names)
    # And make the table prettier
    ch_model_df.reset_index(drop=True, inplace=True)
    ch_model_df = ch_model_df.set_index(['ch_name', 'Condition'])
    ch_model_df







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>Coef.</th>
          <th>Std.Err.</th>
          <th>z</th>
          <th>P&gt;|z|</th>
          <th>[0.025</th>
          <th>0.975]</th>
          <th>Chroma</th>
          <th>Significant</th>
        </tr>
        <tr>
          <th>ch_name</th>
          <th>Condition</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="2" valign="top">S1_D1 hbo</th>
          <th>Tapping_Left</th>
          <td>3.032008</td>
          <td>3.536881</td>
          <td>0.857255</td>
          <td>3.913041e-01</td>
          <td>-3.900152</td>
          <td>9.964168</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>6.415630</td>
          <td>3.536881</td>
          <td>1.813923</td>
          <td>6.968959e-02</td>
          <td>-0.51653</td>
          <td>13.34779</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S1_D2 hbo</th>
          <th>Tapping_Left</th>
          <td>1.777202</td>
          <td>3.536881</td>
          <td>0.502477</td>
          <td>6.153319e-01</td>
          <td>-5.154958</td>
          <td>8.709362</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>6.927322</td>
          <td>3.536881</td>
          <td>1.958596</td>
          <td>5.016009e-02</td>
          <td>-0.004838</td>
          <td>13.859482</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S1_D3 hbo</th>
          <th>Tapping_Left</th>
          <td>2.682615</td>
          <td>3.536881</td>
          <td>0.758469</td>
          <td>4.481702e-01</td>
          <td>-4.249545</td>
          <td>9.614775</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>15.816878</td>
          <td>3.536881</td>
          <td>4.471984</td>
          <td>7.749711e-06</td>
          <td>8.884718</td>
          <td>22.749038</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S2_D1 hbo</th>
          <th>Tapping_Left</th>
          <td>0.327063</td>
          <td>3.536881</td>
          <td>0.092472</td>
          <td>9.263229e-01</td>
          <td>-6.605097</td>
          <td>7.259223</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>1.270148</td>
          <td>3.536881</td>
          <td>0.359115</td>
          <td>7.195088e-01</td>
          <td>-5.662011</td>
          <td>8.202308</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S2_D3 hbo</th>
          <th>Tapping_Left</th>
          <td>1.471616</td>
          <td>3.536881</td>
          <td>0.416077</td>
          <td>6.773534e-01</td>
          <td>-5.460544</td>
          <td>8.403776</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>6.643579</td>
          <td>3.536881</td>
          <td>1.878372</td>
          <td>6.033028e-02</td>
          <td>-0.288581</td>
          <td>13.575739</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S2_D4 hbo</th>
          <th>Tapping_Left</th>
          <td>-0.770107</td>
          <td>3.536881</td>
          <td>-0.217736</td>
          <td>8.276347e-01</td>
          <td>-7.702267</td>
          <td>6.162053</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>-0.036873</td>
          <td>3.536881</td>
          <td>-0.010425</td>
          <td>9.916820e-01</td>
          <td>-6.969033</td>
          <td>6.895287</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S3_D2 hbo</th>
          <th>Tapping_Left</th>
          <td>4.722142</td>
          <td>3.536881</td>
          <td>1.335115</td>
          <td>1.818388e-01</td>
          <td>-2.210018</td>
          <td>11.654302</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>9.560889</td>
          <td>3.536881</td>
          <td>2.703198</td>
          <td>6.867589e-03</td>
          <td>2.628729</td>
          <td>16.493049</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S3_D3 hbo</th>
          <th>Tapping_Left</th>
          <td>3.624990</td>
          <td>3.536881</td>
          <td>1.024911</td>
          <td>3.054050e-01</td>
          <td>-3.30717</td>
          <td>10.55715</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>12.830392</td>
          <td>3.536881</td>
          <td>3.627600</td>
          <td>2.860675e-04</td>
          <td>5.898232</td>
          <td>19.762552</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S4_D3 hbo</th>
          <th>Tapping_Left</th>
          <td>3.286504</td>
          <td>3.536881</td>
          <td>0.929209</td>
          <td>3.527805e-01</td>
          <td>-3.645656</td>
          <td>10.218664</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>9.610416</td>
          <td>3.536881</td>
          <td>2.717201</td>
          <td>6.583667e-03</td>
          <td>2.678256</td>
          <td>16.542576</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S4_D4 hbo</th>
          <th>Tapping_Left</th>
          <td>5.673063</td>
          <td>3.536881</td>
          <td>1.603973</td>
          <td>1.087199e-01</td>
          <td>-1.259097</td>
          <td>12.605223</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>7.008687</td>
          <td>3.536881</td>
          <td>1.981601</td>
          <td>4.752393e-02</td>
          <td>0.076527</td>
          <td>13.940847</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S5_D5 hbo</th>
          <th>Tapping_Left</th>
          <td>5.856888</td>
          <td>3.536881</td>
          <td>1.655947</td>
          <td>9.773257e-02</td>
          <td>-1.075272</td>
          <td>12.789048</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>3.251541</td>
          <td>3.536881</td>
          <td>0.919324</td>
          <td>3.579260e-01</td>
          <td>-3.680619</td>
          <td>10.183701</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S5_D6 hbo</th>
          <th>Tapping_Left</th>
          <td>3.062157</td>
          <td>3.536881</td>
          <td>0.865779</td>
          <td>3.866114e-01</td>
          <td>-3.870003</td>
          <td>9.994317</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>1.885486</td>
          <td>3.536881</td>
          <td>0.533093</td>
          <td>5.939693e-01</td>
          <td>-5.046674</td>
          <td>8.817646</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S5_D7 hbo</th>
          <th>Tapping_Left</th>
          <td>17.880876</td>
          <td>3.536881</td>
          <td>5.055549</td>
          <td>4.291550e-07</td>
          <td>10.948716</td>
          <td>24.813036</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>4.686052</td>
          <td>3.536881</td>
          <td>1.324911</td>
          <td>1.852007e-01</td>
          <td>-2.246107</td>
          <td>11.618212</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S6_D5 hbo</th>
          <th>Tapping_Left</th>
          <td>2.600497</td>
          <td>3.536881</td>
          <td>0.735251</td>
          <td>4.621864e-01</td>
          <td>-4.331663</td>
          <td>9.532657</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>2.180645</td>
          <td>3.536881</td>
          <td>0.616544</td>
          <td>5.375352e-01</td>
          <td>-4.751515</td>
          <td>9.112804</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S6_D7 hbo</th>
          <th>Tapping_Left</th>
          <td>11.862971</td>
          <td>3.536881</td>
          <td>3.354077</td>
          <td>7.963031e-04</td>
          <td>4.930811</td>
          <td>18.795131</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>4.851630</td>
          <td>3.536881</td>
          <td>1.371725</td>
          <td>1.701489e-01</td>
          <td>-2.08053</td>
          <td>11.78379</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S6_D8 hbo</th>
          <th>Tapping_Left</th>
          <td>9.425000</td>
          <td>3.536881</td>
          <td>2.664777</td>
          <td>7.703938e-03</td>
          <td>2.49284</td>
          <td>16.35716</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>5.667118</td>
          <td>3.536881</td>
          <td>1.602292</td>
          <td>1.090910e-01</td>
          <td>-1.265042</td>
          <td>12.599278</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S7_D6 hbo</th>
          <th>Tapping_Left</th>
          <td>8.757646</td>
          <td>3.536881</td>
          <td>2.476093</td>
          <td>1.328291e-02</td>
          <td>1.825486</td>
          <td>15.689806</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>4.375866</td>
          <td>3.536881</td>
          <td>1.237210</td>
          <td>2.160090e-01</td>
          <td>-2.556294</td>
          <td>11.308026</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S7_D7 hbo</th>
          <th>Tapping_Left</th>
          <td>10.806506</td>
          <td>3.536881</td>
          <td>3.055377</td>
          <td>2.247777e-03</td>
          <td>3.874346</td>
          <td>17.738666</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>4.022244</td>
          <td>3.536881</td>
          <td>1.137229</td>
          <td>2.554426e-01</td>
          <td>-2.909916</td>
          <td>10.954404</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S8_D7 hbo</th>
          <th>Tapping_Left</th>
          <td>14.968237</td>
          <td>3.536881</td>
          <td>4.232044</td>
          <td>2.315773e-05</td>
          <td>8.036077</td>
          <td>21.900397</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>6.547861</td>
          <td>3.536881</td>
          <td>1.851309</td>
          <td>6.412509e-02</td>
          <td>-0.384299</td>
          <td>13.480021</td>
          <td>hbo</td>
          <td>False</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">S8_D8 hbo</th>
          <th>Tapping_Left</th>
          <td>11.497395</td>
          <td>3.536881</td>
          <td>3.250716</td>
          <td>1.151150e-03</td>
          <td>4.565235</td>
          <td>18.429555</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
        <tr>
          <th>Tapping_Right</th>
          <td>8.740161</td>
          <td>3.536881</td>
          <td>2.471149</td>
          <td>1.346796e-02</td>
          <td>1.808001</td>
          <td>15.672321</td>
          <td>hbo</td>
          <td>True</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 538-564

.. _tut-fnirs-group-relating:

Relating Responses to Brain Landmarks
-------------------------------------

.. sidebar:: fOLD Toolbox

   You should use the fOLD toolbox to pick your optode locations
   when designing your experiment.
   The tool is very intuitive and easy to use.
   Be sure to cite the authors if you use their tool or data:

   Morais, Guilherme Augusto Zimeo, Joana Bisol Balardin, and João Ricardo Sato. "fNIRS optodes’ location decider (fOLD): a toolbox for probe arrangement guided by brain regions-of-interest." Scientific reports 8.1 (2018): 1-11.

It can be useful to understand what brain structures
the measured response may have resulted from. Here we illustrate
how to report the brain structures/landmarks that the source
detector pair with the largest response was sensitive to.

First we determine the channel with the largest response.

Next, we query the fOLD dataset to determine the
brain landmarks that this channel is most sensitive to.
MNE-NIRS does not distribute the fOLD toolbox or the data
that they provide. See the Notes section of
:func:`mne_nirs.io.fold_channel_specificity` for more information.

.. GENERATED FROM PYTHON SOURCE LINES 564-569

.. code-block:: default


    largest_response_channel = ch_model_df.loc[ch_model_df['Coef.'].idxmax()]
    largest_response_channel






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Coef.          17.880876
    Std.Err.        3.536881
    z               5.055549
    P>|z|                0.0
    [0.025         10.948716
    0.975]         24.813036
    Chroma               hbo
    Significant         True
    Name: (S5_D7 hbo, Tapping_Left), dtype: object



.. GENERATED FROM PYTHON SOURCE LINES 570-575

Next we use information from the fOLD toolbox to report the
channel specificity to different brain regions.
For licensing reasons, these files are not distributed with MNE-NIRS.
To set up your system to use the fOLD functions, see the Notes section of
:func:`mne_nirs.io.fold_channel_specificity`.

.. GENERATED FROM PYTHON SOURCE LINES 576-581

.. code-block:: default


    raw_channel = raw_haemo.copy().pick(largest_response_channel.name[0])
    fold_channel_specificity(raw_channel)[0]







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Channel</th>
          <th>Source</th>
          <th>Detector</th>
          <th>Distance (mm)</th>
          <th>brainSens</th>
          <th>X (mm)</th>
          <th>Y (mm)</th>
          <th>Z (mm)</th>
          <th>Landmark</th>
          <th>Specificity</th>
          <th>BestSource</th>
          <th>BestDetector</th>
          <th>BestMatchDistance</th>
          <th>MatchDistance</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>100.0</td>
          <td>C4</td>
          <td>C2</td>
          <td>40.0</td>
          <td>7.944795</td>
          <td>42.0</td>
          <td>-21.0</td>
          <td>62.0</td>
          <td>R Precentral Gyrus</td>
          <td>48.935362</td>
          <td>C2</td>
          <td>C4</td>
          <td>0.003683</td>
          <td>0.003683</td>
        </tr>
        <tr>
          <th>1</th>
          <td>100.0</td>
          <td>C4</td>
          <td>C2</td>
          <td>40.0</td>
          <td>7.944795</td>
          <td>42.0</td>
          <td>-21.0</td>
          <td>62.0</td>
          <td>R Postcentral Gyrus</td>
          <td>40.399862</td>
          <td>C2</td>
          <td>C4</td>
          <td>0.003683</td>
          <td>0.003683</td>
        </tr>
        <tr>
          <th>2</th>
          <td>100.0</td>
          <td>C4</td>
          <td>C2</td>
          <td>40.0</td>
          <td>7.944795</td>
          <td>42.0</td>
          <td>-21.0</td>
          <td>62.0</td>
          <td>R Inferior Parietal Lobule</td>
          <td>2.960631</td>
          <td>C2</td>
          <td>C4</td>
          <td>0.003683</td>
          <td>0.003683</td>
        </tr>
        <tr>
          <th>3</th>
          <td>100.0</td>
          <td>C4</td>
          <td>C2</td>
          <td>40.0</td>
          <td>7.944795</td>
          <td>42.0</td>
          <td>-21.0</td>
          <td>62.0</td>
          <td>R Superior Frontal Gyrus</td>
          <td>2.944289</td>
          <td>C2</td>
          <td>C4</td>
          <td>0.003683</td>
          <td>0.003683</td>
        </tr>
        <tr>
          <th>4</th>
          <td>100.0</td>
          <td>C4</td>
          <td>C2</td>
          <td>40.0</td>
          <td>7.944795</td>
          <td>42.0</td>
          <td>-21.0</td>
          <td>62.0</td>
          <td>R SupraMarginal Gyrus</td>
          <td>2.083585</td>
          <td>C2</td>
          <td>C4</td>
          <td>0.003683</td>
          <td>0.003683</td>
        </tr>
        <tr>
          <th>5</th>
          <td>100.0</td>
          <td>C4</td>
          <td>C2</td>
          <td>40.0</td>
          <td>7.944795</td>
          <td>42.0</td>
          <td>-21.0</td>
          <td>62.0</td>
          <td>R Middle Frontal Gyrus</td>
          <td>1.981430</td>
          <td>C2</td>
          <td>C4</td>
          <td>0.003683</td>
          <td>0.003683</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 582-586

We observe that the channel with the largest response to tapping
had the greatest specificity to the Precentral Gyrus, which is
the site of the primary motor cortex. This is consistent
with the expectation for a finger tapping task.

.. GENERATED FROM PYTHON SOURCE LINES 590-597

Conclusion
----------

This example has demonstrated how to perform a group level analysis
using a GLM approach.
We observed the responses were evoked primarily contralateral to the
hand of tapping and most likely originate from the primary motor cortex.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  35.112 seconds)

**Estimated memory usage:**  356 MB


.. _sphx_glr_download_auto_examples_general_plot_12_group_glm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mne-tools/mne-nirs/gh-pages?filepath=stable/notebooks/auto_examples/general/plot_12_group_glm.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_12_group_glm.py <plot_12_group_glm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_12_group_glm.ipynb <plot_12_group_glm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
