
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/general/plot_60_aux_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_general_plot_60_aux_data.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_general_plot_60_aux_data.py:


.. _tut-fnirs-aux:

Utilising Auxiliary Data
========================

In this example we demonstrate how to load
auxiliary data from a SNIRF file and include it in
the design matrix for incorporating with your GLM
analysis.

This example builds on the
:ref:`GLM tutorial <tut-fnirs-hrf>`.
As such, we will not explain the GLM procedure in this
example and refer readers to the detailed description above.
Instead, we focus on extracting the auxiliary data and how
this can be incorporated in to your analysis.

.. contents:: Page contents
   :local:
   :depth: 2

.. GENERATED FROM PYTHON SOURCE LINES 24-45

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 2

    # Authors: Robert Luke <code@robertluke.net>
    #
    # License: BSD (3-clause)

    import numpy as np
    import matplotlib.pyplot as plt
    import pandas as pd

    import mne

    from mne_nirs.experimental_design import make_first_level_design_matrix
    from mne_nirs.channels import (get_long_channels,
                                   get_short_channels)
    from mne_nirs.io.snirf import read_snirf_aux_data
    from mne_nirs.datasets.snirf_with_aux import data_path

    from nilearn.plotting import plot_design_matrix









.. GENERATED FROM PYTHON SOURCE LINES 46-51

Import raw NIRS data
--------------------

First we import the raw data. A different dataset is used from
the previous GLM example that contains auxiliary data.

.. GENERATED FROM PYTHON SOURCE LINES 51-57

.. code-block:: default


    fnirs_snirf_file = data_path()
    raw_intensity = mne.io.read_raw_snirf(fnirs_snirf_file).load_data()
    raw_intensity.resample(0.7)







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table class="table table-hover table-striped table-sm table-responsive small">
        <tr>
            <th>Measurement date</th>
        
            <td>August 05, 2022  13:10:58 GMT</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
        
            <td>Unknown</td>
        
        </tr>
            <th>Participant</th>
        
            
        
        </tr>
        <tr>
            <th>Digitized points</th>
        
            <td>300 points</td>
        
        </tr>
        <tr>
            <th>Good channels</th>
            <td>56 fNIRS (CW amplitude)</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td>None</td>
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>Not available</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
    
        <tr>
            <th>Sampling frequency</th>
            <td>0.70 Hz</td>
        </tr>
    
    
        <tr>
            <th>Highpass</th>
            <td>0.00 Hz</td>
        </tr>
    
    
        <tr>
            <th>Lowpass</th>
            <td>0.35 Hz</td>
        </tr>
    
    
    
        <tr>
            <th>Filenames</th>
            <td>2022-08-05_002.snirf</td>
        </tr>
    
        <tr>
            <th>Duration</th>
            <td>00:33:53 (HH:MM:SS)</td>
        </tr>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 58-64

Clean up annotations before analysis
------------------------------------

Next we update the annotations by assigning names to each trigger ID.
Then we crop the recording to the section containing our
experimental conditions.

.. GENERATED FROM PYTHON SOURCE LINES 64-72

.. code-block:: default


    raw_intensity.annotations.rename({'1': 'Control',
                                      '2': 'Tapping_Left',
                                      '3': 'Tapping_Right'})
    raw_intensity.annotations.delete(raw_intensity.annotations.description == '15')
    raw_intensity.annotations.set_durations(5)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Annotations | 62 segments: Control (20), Control5 (2), Tapping_Left (20), ...>



.. GENERATED FROM PYTHON SOURCE LINES 73-76

Preprocess NIRS data
--------------------
Next we convert the raw data to haemoglobin concentration.

.. GENERATED FROM PYTHON SOURCE LINES 76-81

.. code-block:: default


    raw_od = mne.preprocessing.nirs.optical_density(raw_intensity)
    raw_haemo = mne.preprocessing.nirs.beer_lambert_law(raw_od, ppf=0.1)









.. GENERATED FROM PYTHON SOURCE LINES 82-85

We then split the data in to
short channels which predominantly contain systemic responses and
long channels which have both neural and systemic contributions.

.. GENERATED FROM PYTHON SOURCE LINES 86-91

.. code-block:: default


    short_chs = get_short_channels(raw_haemo)
    raw_haemo = get_long_channels(raw_haemo)









.. GENERATED FROM PYTHON SOURCE LINES 92-104

Create design matrix
--------------------

.. sidebar:: Relevant literature

   For further discussion on design matrices see
   the Nilearn examples. Specifically the
   `first level model example <http://nilearn.github.io/auto_examples/04_glm_first_level/plot_first_level_details.html>`_.

Next we create a model to fit our data to.
The model consists of various components to model different things we assume
contribute to the measured signal.

.. GENERATED FROM PYTHON SOURCE LINES 104-112

.. code-block:: default


    design_matrix = make_first_level_design_matrix(raw_haemo,
                                                   drift_model='cosine',
                                                   high_pass=0.005,  # Must be specified per experiment
                                                   hrf_model='spm',
                                                   stim_dur=5.0)









.. GENERATED FROM PYTHON SOURCE LINES 113-118

We also add the mean of the short channels to the design matrix.
In theory these channels contain only systemic components, so including
them in the design matrix allows us to estimate the neural component
related to each experimental condition
uncontaminated by systemic effects.

.. GENERATED FROM PYTHON SOURCE LINES 119-127

.. code-block:: default


    design_matrix["ShortHbO"] = np.mean(short_chs.copy().pick(
                                        picks="hbo").get_data(), axis=0)

    design_matrix["ShortHbR"] = np.mean(short_chs.copy().pick(
                                        picks="hbr").get_data(), axis=0)









.. GENERATED FROM PYTHON SOURCE LINES 128-131

We can view the design matrix by printing the variable
and we see that it includes the standard regressors, but does
not yet contain any auxiliary data.

.. GENERATED FROM PYTHON SOURCE LINES 132-138

.. code-block:: default


    fig, ax1 = plt.subplots(figsize=(10, 6), nrows=1, ncols=1)
    fig = plot_design_matrix(design_matrix, ax=ax1)






.. image-sg:: /auto_examples/general/images/sphx_glr_plot_60_aux_data_001.png
   :alt: plot 60 aux data
   :srcset: /auto_examples/general/images/sphx_glr_plot_60_aux_data_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 139-149

Load auxiliary data
-------------------

The design matrix is a pandas data frame. As such,
we wish to load the auxiliary data in the same format.
The following function will load the SNIRF file and extract
the auxiliary data. The auxiliary data can be sampled at a
different rate to the raw fNIRS data, so this function will
conveniently resample the data to the same rate as the raw
fNIRS data.

.. GENERATED FROM PYTHON SOURCE LINES 149-153

.. code-block:: default


    aux_df = read_snirf_aux_data(fnirs_snirf_file, raw_haemo)









.. GENERATED FROM PYTHON SOURCE LINES 154-156

And you can verify the data looks reasonable by plotting
individual fields.

.. GENERATED FROM PYTHON SOURCE LINES 157-163

.. code-block:: default


    plt.plot(raw_haemo.times, aux_df['HR'])
    plt.xlabel("Time (s)")
    plt.ylabel("Heart Rate (bpm)")





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_60_aux_data_002.png
   :alt: plot 60 aux data
   :srcset: /auto_examples/general/images/sphx_glr_plot_60_aux_data_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(38.347222222222214, 0.5, 'Heart Rate (bpm)')



.. GENERATED FROM PYTHON SOURCE LINES 164-169

Include auxiliary data in design matrix
---------------------------------------

Finally we append the auxiliary data to the design matrix
so that these can be included as regressors in a GLM analysis.

.. GENERATED FROM PYTHON SOURCE LINES 169-174

.. code-block:: default



    design_matrix = pd.concat([design_matrix, aux_df], axis=1)









.. GENERATED FROM PYTHON SOURCE LINES 175-177

And we can visually display the design matrix and verify
the data is included.

.. GENERATED FROM PYTHON SOURCE LINES 178-182

.. code-block:: default

    fig, ax1 = plt.subplots(figsize=(10, 6), nrows=1, ncols=1)
    fig = plot_design_matrix(design_matrix, ax=ax1)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_60_aux_data_003.png
   :alt: plot 60 aux data
   :srcset: /auto_examples/general/images/sphx_glr_plot_60_aux_data_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 183-193

Conclusion
----------

We have demonstrated how to load auxiliary data from a SNIRF
file. We illustrated how to include this data in your design matrix
for further GLM analysis. We do not go through a full GLM analysis,
instead the reader is directed to the dedicated :ref:`GLM tutorial <tut-fnirs-hrf>`.
The auxiliary data may need to be treated before being included in your analysis,
for example you may need to normalise before inclusion in statistical analysis etc,
but this is beyond the scope of this tutorial.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.682 seconds)

**Estimated memory usage:**  9 MB


.. _sphx_glr_download_auto_examples_general_plot_60_aux_data.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mne-tools/mne-nirs/gh-pages?filepath=stable/notebooks/auto_examples/general/plot_60_aux_data.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_60_aux_data.py <plot_60_aux_data.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_60_aux_data.ipynb <plot_60_aux_data.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
