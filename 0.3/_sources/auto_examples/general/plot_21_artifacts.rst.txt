
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/general/plot_21_artifacts.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_general_plot_21_artifacts.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_general_plot_21_artifacts.py:


.. _ex-fnirs-artifacts:

==============================
Artifact Correction Techniques
==============================

Here we artificially introduce several artifacts in a
functional near-infrared spectroscopy (fNIRS) measurement and observe
how artifact correction techniques attempt to correct the data.

.. GENERATED FROM PYTHON SOURCE LINES 13-23

.. code-block:: default

    # Authors: Robert Luke <mail@robertluke.net>
    #
    # License: BSD (3-clause)

    import os
    import mne

    from mne.preprocessing.nirs import (optical_density,
                                        temporal_derivative_distribution_repair)








.. GENERATED FROM PYTHON SOURCE LINES 24-31

Import data
-----------

Here we will work with the :ref:`fNIRS motor data <fnirs-motor-dataset>`.
We resample the data to make indexing exact times more convenient.
We then convert the data to optical density to perform corrections on
and plot these signals.

.. GENERATED FROM PYTHON SOURCE LINES 31-42

.. code-block:: default


    fnirs_data_folder = mne.datasets.fnirs_motor.data_path()
    fnirs_cw_amplitude_dir = os.path.join(fnirs_data_folder, 'Participant-1')
    raw_intensity = mne.io.read_raw_nirx(fnirs_cw_amplitude_dir, verbose=True)
    raw_intensity.load_data().resample(3, npad="auto")
    raw_od = optical_density(raw_intensity)
    new_annotations = mne.Annotations([31, 187, 317], [8, 8, 8],
                                      ["Movement", "Movement", "Movement"])
    raw_od.set_annotations(new_annotations)
    raw_od.plot(n_channels=15, duration=400, show_scrollbars=False)




.. image-sg:: /auto_examples/general/images/sphx_glr_plot_21_artifacts_001.png
   :alt: Raw plot
   :srcset: /auto_examples/general/images/sphx_glr_plot_21_artifacts_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading /home/circleci/mne_data/MNE-fNIRS-motor-data/Participant-1

    <mne_qt_browser._pg_figure.MNEQtBrowser object at 0x7fbf0243d670>



.. GENERATED FROM PYTHON SOURCE LINES 43-46

We can see some small artifacts in the above data from movement around 40,
190 and 240 seconds. However, this data is relatively clean so we will
add some additional artifacts below.

.. GENERATED FROM PYTHON SOURCE LINES 49-59

Add artificial artifacts to data
--------------------------------

Two common types of artifacts in NIRS data are spikes and baseline shifts.
Spikes often occur when a person moves and the optode moves relative to the
scalp and then returns to its original position.
Baseline shifts occur if the optode moves relative to the scalp and does not
return to its original position.
We add a spike type artifact at 100 seconds and a baseline shift at 200
seconds to the data.

.. GENERATED FROM PYTHON SOURCE LINES 59-72

.. code-block:: default


    corrupted_data = raw_od.get_data()
    corrupted_data[:, 298:302] = corrupted_data[:, 298:302] - 0.06
    corrupted_data[:, 450:750] = corrupted_data[:, 450:750] + 0.03
    corrupted_od = mne.io.RawArray(corrupted_data, raw_od.info,
                                   first_samp=raw_od.first_samp)
    new_annotations.append([95, 145, 245], [10, 10, 10],
                           ["Spike", "Baseline", "Baseline"])
    corrupted_od.set_annotations(new_annotations)

    corrupted_od.plot(n_channels=15, duration=400, show_scrollbars=False)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_21_artifacts_002.png
   :alt: Raw plot
   :srcset: /auto_examples/general/images/sphx_glr_plot_21_artifacts_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <mne_qt_browser._pg_figure.MNEQtBrowser object at 0x7fbf86a24820>



.. GENERATED FROM PYTHON SOURCE LINES 73-78

Apply temporal derivative distribution repair
---------------------------------------------

This approach corrects baseline shift and spike artifacts without the need
for any user-supplied parameters FishburnEtAl2019.

.. GENERATED FROM PYTHON SOURCE LINES 78-83

.. code-block:: default


    corrected_tddr = temporal_derivative_distribution_repair(corrupted_od)
    corrected_tddr.plot(n_channels=15, duration=400, show_scrollbars=False)





.. image-sg:: /auto_examples/general/images/sphx_glr_plot_21_artifacts_003.png
   :alt: Raw plot
   :srcset: /auto_examples/general/images/sphx_glr_plot_21_artifacts_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <mne_qt_browser._pg_figure.MNEQtBrowser object at 0x7fbe7b334f70>



.. GENERATED FROM PYTHON SOURCE LINES 84-87

We can see in the data above that the introduced spikes and shifts are
largely removed, but some residual smaller artifact remains.
The same can be said for the artifacts in the original data.

.. GENERATED FROM PYTHON SOURCE LINES 90-96

References
----------

Frank A Fishburn, Ruth S Ludlum, Chandan J Vaidya, and Andrei V Medvedev.
Temporal derivative distribution repair (tddr): a motion correction method
for fNIRS. NeuroImage,
184:171â€“179, 2019. doi:10.1016/j.neuroimage.2018.09.025.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.115 seconds)

**Estimated memory usage:**  10 MB


.. _sphx_glr_download_auto_examples_general_plot_21_artifacts.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/mne-tools/mne-nirs/gh-pages?filepath=notebooks/auto_examples/general/plot_21_artifacts.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_21_artifacts.py <plot_21_artifacts.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_21_artifacts.ipynb <plot_21_artifacts.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
